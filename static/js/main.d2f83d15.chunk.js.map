{"version":3,"sources":["utils/bookmark-data.ts","stores/bookmark-form-store.ts","stores/bookmark-store.ts","utils/auth-service.ts","stores/login-form-store.ts","stores/register-form-store.ts","stores/auth-store.ts","stores/folder-store.ts","utils/note-data.ts","stores/note-store.ts","utils/todo-data.ts","stores/todo-store.ts","stores/root-store.ts","contexts/store-context.tsx","components/feature/header/auth/login.tsx","components/feature/header/auth/register.tsx","components/feature/header/auth/auth.tsx","utils/local-storage.ts","assets/images/github.svg","assets/images/ddg.svg","assets/images/google.svg","assets/images/naver.png","assets/images/wa.svg","assets/images/iflag-logo.svg","components/layout/header.tsx","components/layout/footer.tsx","utils/user-data.ts","components/layout/index.tsx","pages/main-page/main-page.tsx","App.tsx","index.js","utils/api.ts"],"names":["BookmarkData","base","bookmarkUrl","this","axios","create","baseURL","API_HOST","API_URL","bookmarks","a","token","getStorageItem","storageAccessKey","config","headers","Authorization","get","response","title","url","description","category_title","data","post","categories","id","put","info","delete","name","search","result","BookmarkForm","root","rootStore","categoryTitle","checkUrl","slice","concat","makeObservable","observable","setTitle","action","setUrl","setDescription","setCategoryTitle","resetInfo","newTitle","newUrl","newDescription","newCategotyTitle","BookmarkStore","authStore","folderStore","bookmarkData","rootBookmarks","bookmarksInFolder","bookmarkForm","setRootBookmarks","setBookmarksInFolder","getAllRootBookmarks","searchBookmarks","addBookmark","editBookmarkInfo","deleteBookmark","refreshBookmarkListInFolder","newRootBookmarks","newBookmarksInFolder","checkAccessToken","getAllBookmarks","status","logout","alert","request","searchInput","getAllFolders","length","setFolderInfoList","fixedUrl","appendBookmark","getAllBookmarksInFolder","AuthService","userUrl","users","email","verification","code","verificationCode","password","signup","signin","removeStorageItem","storageRefreshKey","storageAccessTokenExp","console","log","refresh","accessToken","refreshToken","parseInt","Date","now","toString","LoginForm","loaded","setLoaded","setEmail","setPassword","newLoadState","newEmail","newPassword","RegisterForm","step","setStep","setVerificationCode","nextStep","newVerificationCode","AuthStore","onLogin","requireRefresh","handleToken","authService","registerForm","loginForm","login","verificateEmail","checkVerificationCode","register","checkLoginState","setRequireRefresh","reaction","then","setStorageItem","accessTokenExp","isTokenExpired","e","state","FolderStore","folderInfoList","folderNameList","setFolderNameList","addFolder","editFolderName","deleteFolder","getAllFolderInfo","newFolderNameList","map","changeFolderName","NoteData","noteUrl","notes","contents","NoteStore","noteData","note","setNote","refreshNoteContents","editNoteContents","deleteNoteContents","content","getNoteContents","editNote","deleteAllNote","TodoData","todoUrl","todo","completed","TodoStore","todoData","todoList","setTodoList","refreshTodoList","addTodo","deleteTodo","completeTodo","editTodo","todos","getAllTodoList","updateTodo","RootStore","bookmarkStore","noteStore","todoStore","StoreContext","createContext","useStoreContext","useContext","LoadingSpinner","styled","div","Login","observer","setShowSelectedForm","useEffect","handleSubmitLogin","preventDefault","className","onSubmit","type","placeholder","value","onChange","target","required","onClick","Register","showHeader","checkPasswordLength","useMemo","handleSubmitEmail","handleSubmitCode","handleSubmitPassword","DarkModalSection","Auth","showSelectedForm","key","initialValue","item","window","localStorage","getItem","JSON","parse","error","setItem","stringify","removeItem","Header","userData","useState","toggleButtonList","setToggleButtonList","image","GoogleIcon","abbreviation","fullName","selectedSearchEngine","setSelectedSearchEngine","NaverIcon","DDGIcon","GithubIcon","WAIcon","searchEngines","setSearchEngines","searchContent","setSearchContent","saveSeletedSearchEngine","selectSearchEngine","sortSearchEngineList","newSelectedSearchEngine","newSearchEngines","filter","s","sort","b","setInitialSearchEngine","getSelectedSearchEngine","find","portal","src","Logo","alt","searchEngine","prev","searchQuery","toLowerCase","open","browseInNewTab","saveSearchHistory","Footer","UserData","searched","history","keyword","Layout","children","LazyTodoList","lazy","LazyBookmarkSection","LazyNote","MainPage","fallback","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d2f83d15.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios';\nimport {\n  BookmarkInfo,\n  CommonInfo,\n} from 'components/feature/main-page/bookmark/bookmark-section';\nimport API_URL, { API_HOST } from 'utils/api';\nimport { getStorageItem, storageAccessKey } from 'utils/local-storage';\n\nexport interface IFolderData {\n  getAllFolderInfo(): Promise<AxiosResponse<any>>;\n  addFolder(title: string): Promise<void>;\n  changeFolderName(id: number, title: string): Promise<void>;\n  deleteFolder(id: number): Promise<void>;\n}\nexport interface IBookmarkData {\n  getAllBookmarks(): Promise<AxiosResponse<any>>;\n  searchBookmarks(name: string): any;\n  appendBookmark(bookmarkInfo: CommonInfo): Promise<void>;\n  editBookmarkInfo(id: number, info: BookmarkInfo): Promise<void>;\n  deleteBookmark(id: number): Promise<void>;\n  getAllBookmarksInFolder(id: number): Promise<AxiosResponse<any>>;\n}\n\nclass BookmarkData implements IFolderData, IBookmarkData {\n  private base;\n  private bookmarkUrl;\n  constructor() {\n    this.base = axios.create({\n      baseURL: API_HOST,\n    });\n    this.bookmarkUrl = API_URL.bookmarks;\n  }\n\n  async getAllBookmarks() {\n    const { bookmarks } = this.bookmarkUrl;\n\n    const token = getStorageItem(storageAccessKey, '');\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n\n    const response = await this.base.get(bookmarks, config);\n    return response;\n  }\n\n  async appendBookmark({\n    title,\n    url,\n    description,\n    category_title,\n  }: CommonInfo) {\n    const { bookmarks } = this.bookmarkUrl;\n    const data = {\n      title,\n      url,\n      description,\n      category_title,\n    };\n    const token = getStorageItem(storageAccessKey, '');\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n\n    await this.base.post(bookmarks, data, config);\n  }\n\n  async getAllFolderInfo() {\n    const { categories } = this.bookmarkUrl;\n    const token = getStorageItem(storageAccessKey, '');\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n\n    const response = await this.base.get(categories, config);\n    return response;\n  }\n\n  async addFolder(title: string) {\n    const { categories } = this.bookmarkUrl;\n    const data = {\n      title,\n    };\n    const token = getStorageItem(storageAccessKey, '');\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n\n    await this.base.post(categories, data, config);\n  }\n\n  async changeFolderName(id: number, title: string) {\n    const { categories } = this.bookmarkUrl;\n    const url = `${categories}${id}`;\n\n    const data = {\n      title,\n    };\n    const token = getStorageItem(storageAccessKey, '');\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n\n    await this.base.put(url, data, config);\n  }\n\n  async editBookmarkInfo(id: number, info: BookmarkInfo) {\n    const { bookmarks } = this.bookmarkUrl;\n    const url = `${bookmarks}${id}`;\n\n    const token = getStorageItem(storageAccessKey, '');\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n\n    await this.base.put(url, info, config);\n  }\n\n  async deleteFolder(id: number) {\n    const { categories } = this.bookmarkUrl;\n    const url = `${categories}${id}`;\n\n    const token = getStorageItem(storageAccessKey, '');\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n\n    await this.base.delete(url, config);\n  }\n\n  async deleteBookmark(id: number) {\n    const { bookmarks } = this.bookmarkUrl;\n    const url = `${bookmarks}${id}`;\n\n    const token = getStorageItem(storageAccessKey, '');\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n\n    await this.base.delete(url, config);\n  }\n\n  async getAllBookmarksInFolder(id: number) {\n    const { categories } = this.bookmarkUrl;\n    const url = `${categories}${id}`;\n\n    const token = getStorageItem(storageAccessKey, '');\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n\n    const response = await this.base.get(url, config);\n    return response;\n  }\n\n  async searchBookmarks(name: string) {\n    const { search } = this.bookmarkUrl;\n    const url = `${search}?q=${name}`;\n\n    const token = getStorageItem(storageAccessKey, '');\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n\n    const response = await this.base.get(url, config);\n    const result = await response.data;\n    return result;\n  }\n}\n\nexport default BookmarkData;\n","import { action, makeObservable, observable } from \"mobx\";\nimport BookmarkStore from \"./bookmark-store\";\n\nclass BookmarkForm {\n  private rootStore: BookmarkStore;\n\n  title: string;\n  url: string;\n  description: string;\n  categoryTitle: string;\n\n  constructor(root: BookmarkStore) {\n    makeObservable(this, {\n      title: observable,\n      url: observable,\n      description: observable,\n      categoryTitle: observable,\n\n      setTitle: action,\n      setUrl: action,\n      setDescription: action,\n      setCategoryTitle: action,\n      checkUrl: action,\n      resetInfo: action,\n    });\n\n    this.rootStore = root;\n\n    this.title = \"\";\n    this.url = \"\";\n    this.description = \"\";\n    this.categoryTitle = \"\";\n  }\n\n  setTitle(newTitle: string) {\n    this.title = newTitle;\n  }\n  setUrl(newUrl: string) {\n    this.url = newUrl;\n  }\n  setDescription(newDescription: string) {\n    this.description = newDescription;\n  }\n  setCategoryTitle(newCategotyTitle: string) {\n    this.categoryTitle = newCategotyTitle;\n  }\n  checkUrl = (): string => {\n    const front = this.url.slice(0, 4);\n    if (front !== \"http\") {\n      return \"https://\".concat(this.url);\n    }\n    return this.url;\n  };\n  resetInfo() {\n    this.title = \"\";\n    this.url = \"\";\n    this.description = \"\";\n    this.categoryTitle = \"\";\n  }\n}\n\nexport default BookmarkForm;\n","import AuthStore from \"stores/auth-store\";\nimport {\n  Bookmark,\n  BookmarkInfo,\n} from \"components/feature/main-page/bookmark/bookmark-section\";\nimport { action, makeObservable, observable } from \"mobx\";\nimport BookmarkData, { IBookmarkData } from \"utils/bookmark-data\";\nimport { RootStore } from \"stores/root-store\";\nimport FolderStore from \"./folder-store\";\nimport BookmarkForm from \"./bookmark-form-store\";\n\nclass BookmarkStore {\n  private rootStore: RootStore;\n\n  private bookmarkData: IBookmarkData;\n\n  rootBookmarks: Bookmark[];\n  bookmarksInFolder: Bookmark[];\n\n  bookmarkForm: BookmarkForm;\n\n  constructor(\n    root: RootStore,\n    private authStore: AuthStore,\n    private folderStore: FolderStore\n  ) {\n    makeObservable(this, {\n      rootBookmarks: observable,\n      bookmarksInFolder: observable,\n\n      setRootBookmarks: action,\n      setBookmarksInFolder: action,\n      getAllRootBookmarks: action,\n      searchBookmarks: action,\n      addBookmark: action,\n      editBookmarkInfo: action,\n      deleteBookmark: action,\n      refreshBookmarkListInFolder: action,\n    });\n\n    this.rootStore = root;\n    this.rootBookmarks = [];\n    this.bookmarksInFolder = [];\n\n    this.bookmarkData = new BookmarkData();\n\n    this.bookmarkForm = new BookmarkForm(this);\n  }\n\n  setRootBookmarks(newRootBookmarks: Bookmark[]) {\n    this.rootBookmarks = newRootBookmarks;\n  }\n\n  setBookmarksInFolder(newBookmarksInFolder: Bookmark[]) {\n    this.bookmarksInFolder = newBookmarksInFolder;\n  }\n\n  async getAllRootBookmarks() {\n    this.authStore.checkAccessToken();\n\n    try {\n      const response = await this.bookmarkData.getAllBookmarks();\n      const newRootBookmarks = await response.data[0].bookmarks;\n      this.setRootBookmarks(newRootBookmarks);\n    } catch (error) {\n      this.setRootBookmarks([]);\n      if (error.response.status === 403) {\n        this.authStore.logout();\n        return;\n      }\n      alert(error.request.response);\n    }\n  }\n\n  async searchBookmarks(searchInput: string) {\n    this.authStore.checkAccessToken();\n\n    if (searchInput === \"\") {\n      this.getAllRootBookmarks();\n      this.folderStore.getAllFolders();\n      return;\n    }\n\n    const result = await this.bookmarkData.searchBookmarks(searchInput);\n    if (result[0].bookmarks.length === 0) {\n      alert(\"원하는 북마크를 찾을 수 없습니다.\");\n    } else {\n      this.setRootBookmarks(result[0].bookmarks);\n      this.folderStore.setFolderInfoList([]);\n    }\n  }\n\n  async addBookmark() {\n    this.authStore.checkAccessToken();\n\n    const { title, description, categoryTitle } = this.bookmarkForm;\n\n    const fixedUrl = this.bookmarkForm.checkUrl();\n\n    await this.bookmarkData.appendBookmark({\n      title,\n      url: fixedUrl,\n      description,\n      category_title: categoryTitle,\n    });\n    this.getAllRootBookmarks();\n  }\n\n  async editBookmarkInfo(id: number, info: BookmarkInfo) {\n    this.authStore.checkAccessToken();\n\n    await this.bookmarkData.editBookmarkInfo(id, info);\n  }\n\n  async deleteBookmark(id: number) {\n    this.authStore.checkAccessToken();\n\n    await this.bookmarkData.deleteBookmark(id);\n  }\n\n  async refreshBookmarkListInFolder(id: number) {\n    this.authStore.checkAccessToken();\n\n    const response = await this.bookmarkData.getAllBookmarksInFolder(id);\n    const result = await response.data;\n    this.setBookmarksInFolder(result);\n  }\n}\n\nexport default BookmarkStore;\n","import axios from \"axios\";\nimport API_URL, { API_HOST } from \"utils/api\";\nimport {\n  getStorageItem,\n  removeStorageItem,\n  storageAccessKey,\n  storageAccessTokenExp,\n  storageRefreshKey,\n} from \"utils/local-storage\";\n\nexport interface IAuthService {\n  logout(): void;\n}\n\nclass AuthService implements IAuthService {\n  private base;\n  private userUrl;\n\n  constructor() {\n    this.base = axios.create({\n      baseURL: API_HOST,\n    });\n    this.userUrl = API_URL.users;\n  }\n\n  async verification(email: string) {\n    const { verification } = this.userUrl;\n    const data = {\n      email,\n    };\n\n    const response = await this.base.post(verification, data);\n    return response;\n  }\n\n  async verificationCode(code: string) {\n    const { verificationCode } = this.userUrl;\n    const data = {\n      code,\n    };\n\n    const response = await this.base.post(verificationCode, data);\n    return response;\n  }\n\n  async register(email: string, password: string) {\n    const { signup } = this.userUrl;\n    const data = {\n      email,\n      password,\n    };\n\n    const response = await this.base.post(signup, data);\n    return response;\n  }\n\n  async login(email: string, password: string) {\n    const { signin } = this.userUrl;\n    const data = {\n      email,\n      password,\n    };\n\n    const response = await this.base.post(signin, data);\n    const result = await response.data;\n\n    return result;\n  }\n\n  logout() {\n    removeStorageItem(storageAccessKey);\n    removeStorageItem(storageRefreshKey);\n    removeStorageItem(storageAccessTokenExp);\n  }\n\n  async refreshToken() {\n    console.log(\"token changed\");\n    const { refresh } = this.userUrl;\n\n    const accessToken = getStorageItem(storageAccessKey, \"\");\n    const refreshToken = getStorageItem(storageRefreshKey, \"\");\n\n    const data = {\n      accessToken,\n      refreshToken,\n    };\n\n    const response = await this.base.post(refresh, data);\n    const result = await response.data;\n    return result;\n  }\n\n  isTokenExpired() {\n    const accessTokenExp = getStorageItem(storageAccessTokenExp, \"\");\n    const currentTime = parseInt(Date.now().toString().slice(0, 10));\n\n    return accessTokenExp - 1000 < currentTime;\n  }\n}\n\nexport default AuthService;\n","import { action, makeObservable, observable } from \"mobx\";\nimport AuthStore from \"./auth-store\";\n\nclass LoginForm {\n  private rootStore: AuthStore;\n\n  loaded: boolean;\n  email: string;\n  password: string;\n\n  constructor(root: AuthStore) {\n    makeObservable(this, {\n      loaded: observable,\n      email: observable,\n      password: observable,\n\n      setLoaded: action,\n      setEmail: action,\n      setPassword: action,\n      resetInfo: action,\n    });\n\n    this.rootStore = root;\n\n    this.loaded = true;\n    this.email = \"\";\n    this.password = \"\";\n  }\n\n  setLoaded(newLoadState: boolean) {\n    this.loaded = newLoadState;\n  }\n  setEmail(newEmail: string) {\n    this.email = newEmail;\n  }\n  setPassword(newPassword: string) {\n    this.password = newPassword;\n  }\n  resetInfo() {\n    this.email = \"\";\n    this.password = \"\";\n  }\n}\n\nexport default LoginForm;\n","import { Steps } from \"components/feature/header/auth/register\";\nimport { action, makeObservable, observable } from \"mobx\";\nimport AuthStore from \"./auth-store\";\n\nclass RegisterForm {\n  private rootStore: AuthStore;\n\n  loaded: boolean;\n  step: Steps;\n  email: string;\n  password: string;\n  verificationCode: string;\n\n  constructor(root: AuthStore) {\n    makeObservable(this, {\n      loaded: observable,\n      step: observable,\n      email: observable,\n      password: observable,\n      verificationCode: observable,\n\n      setLoaded: action,\n      setStep: action,\n      setEmail: action,\n      setVerificationCode: action,\n      setPassword: action,\n      resetInfo: action,\n    });\n\n    this.rootStore = root;\n\n    this.loaded = true;\n    this.step = \"email\";\n    this.email = \"\";\n    this.password = \"\";\n    this.verificationCode = \"\";\n  }\n\n  setLoaded(newLoadState: boolean) {\n    this.loaded = newLoadState;\n  }\n  setStep(nextStep: Steps) {\n    this.step = nextStep;\n  }\n  setEmail(newEmail: string) {\n    this.email = newEmail;\n  }\n  setPassword(newPassword: string) {\n    this.password = newPassword;\n  }\n  setVerificationCode(newVerificationCode: string) {\n    this.verificationCode = newVerificationCode;\n  }\n  resetInfo() {\n    this.email = \"\";\n    this.password = \"\";\n    this.verificationCode = \"\";\n  }\n}\n\nexport default RegisterForm;\n","import { action, makeObservable, observable, reaction } from \"mobx\";\nimport AuthService from \"utils/auth-service\";\nimport {\n  setStorageItem,\n  storageAccessKey,\n  storageAccessTokenExp,\n  storageRefreshKey,\n} from \"utils/local-storage\";\nimport LoginForm from \"stores/login-form-store\";\nimport RegisterForm from \"stores/register-form-store\";\nimport { RootStore } from \"stores/root-store\";\n\nclass AuthStore {\n  private rootStore: RootStore;\n\n  onLogin: boolean;\n  requireRefresh: boolean;\n\n  handleToken: () => void;\n\n  private authService: AuthService;\n\n  registerForm: RegisterForm;\n  loginForm: LoginForm;\n\n  constructor(root: RootStore) {\n    makeObservable(this, {\n      onLogin: observable,\n      requireRefresh: observable,\n\n      login: action,\n      verificateEmail: action,\n      checkVerificationCode: action,\n      register: action,\n      logout: action,\n      checkLoginState: action,\n      setRequireRefresh: action,\n      refreshToken: action,\n      checkAccessToken: action,\n    });\n\n    this.rootStore = root;\n    this.onLogin = false;\n    this.requireRefresh = false;\n\n    this.authService = new AuthService();\n    this.registerForm = new RegisterForm(this);\n    this.loginForm = new LoginForm(this);\n\n    this.handleToken = reaction(\n      () => this.requireRefresh,\n      (requireRefresh) => {\n        if (requireRefresh) {\n          this.authService\n            .refreshToken()\n            .then((result) => {\n              console.log(\"token updated\");\n              setStorageItem(storageAccessKey, result.accessToken);\n              setStorageItem(storageRefreshKey, result.refreshToken);\n              setStorageItem(storageAccessTokenExp, result.accessTokenExp);\n            })\n            .then(() => {\n              this.setRequireRefresh(false);\n            });\n        }\n      }\n    );\n  }\n\n  async login() {\n    const result = await this.authService.login(\n      this.loginForm.email,\n      this.loginForm.password\n    );\n    setStorageItem(storageAccessKey, result.accessToken);\n    setStorageItem(storageRefreshKey, result.refreshToken);\n    setStorageItem(storageAccessTokenExp, result.accessTokenExp);\n    this.onLogin = true;\n  }\n\n  async verificateEmail() {\n    const response = await this.authService.verification(\n      this.registerForm.email\n    );\n    if (response.status === 201) {\n      this.registerForm.setStep(\"verification\");\n    }\n  }\n\n  async checkVerificationCode() {\n    const response = await this.authService.verificationCode(\n      this.registerForm.verificationCode\n    );\n    if (response.status === 200) {\n      this.registerForm.setStep(\"password\");\n    }\n  }\n\n  async register() {\n    const response = await this.authService.register(\n      this.registerForm.email,\n      this.registerForm.password\n    );\n    if (response.status === 201) {\n      this.registerForm.setStep(\"success\");\n    }\n  }\n\n  async logout() {\n    this.authService.logout();\n    this.onLogin = false;\n  }\n\n  checkLoginState() {\n    try {\n      if (this.authService.isTokenExpired()) {\n        this.logout();\n      } else {\n        this.onLogin = true;\n      }\n    } catch (e) {\n      this.logout();\n    }\n  }\n\n  setRequireRefresh(state: boolean) {\n    this.requireRefresh = state;\n  }\n\n  refreshToken() {\n    this.setRequireRefresh(true);\n    // this.handleToken();\n  }\n\n  checkAccessToken() {\n    try {\n      if (this.authService.isTokenExpired()) this.refreshToken();\n    } catch (e) {\n      this.logout();\n    }\n  }\n}\n\nexport default AuthStore;\n","import AuthStore from \"stores/auth-store\";\nimport { FolderInfo } from \"components/feature/main-page/bookmark/bookmark-section\";\nimport { action, makeObservable, observable } from \"mobx\";\nimport BookmarkData, { IFolderData } from \"utils/bookmark-data\";\nimport { RootStore } from \"stores/root-store\";\n\nclass FolderStore {\n  private rootStore: RootStore;\n\n  private bookmarkData: IFolderData;\n\n  folderInfoList: FolderInfo[];\n  folderNameList: string[];\n\n  constructor(root: RootStore, private authStore: AuthStore) {\n    makeObservable(this, {\n      folderInfoList: observable,\n      folderNameList: observable,\n\n      setFolderInfoList: action,\n      setFolderNameList: action,\n      getAllFolders: action,\n      addFolder: action,\n      editFolderName: action,\n      deleteFolder: action,\n    });\n\n    this.rootStore = root;\n    this.folderInfoList = [];\n    this.folderNameList = [];\n\n    this.bookmarkData = new BookmarkData();\n  }\n\n  setFolderInfoList(folderInfoList: FolderInfo[]) {\n    this.folderInfoList = folderInfoList;\n  }\n  setFolderNameList(folderNameList: string[]) {\n    this.folderNameList = folderNameList;\n  }\n\n  async getAllFolders() {\n    this.authStore.checkAccessToken();\n\n    try {\n      const response = await this.bookmarkData.getAllFolderInfo();\n      this.setFolderInfoList(response.data);\n      const newFolderNameList = response.data.map(\n        (info: FolderInfo) => info.title\n      );\n      this.setFolderNameList([\"\", ...newFolderNameList]);\n    } catch (error) {\n      this.setFolderInfoList([]);\n      this.setFolderNameList([]);\n      if (error.response.status === 403) {\n        this.authStore.logout();\n      }\n    }\n  }\n\n  async addFolder(title: string) {\n    this.authStore.checkAccessToken();\n\n    await this.bookmarkData.addFolder(title);\n    this.getAllFolders();\n  }\n\n  async editFolderName(id: number, title: string) {\n    this.authStore.checkAccessToken();\n\n    await this.bookmarkData.changeFolderName(id, title);\n    this.getAllFolders();\n  }\n\n  async deleteFolder(id: number) {\n    this.authStore.checkAccessToken();\n\n    await this.bookmarkData.deleteFolder(id);\n    this.getAllFolders();\n  }\n}\n\nexport default FolderStore;\n","import axios from \"axios\";\nimport API_URL, { API_HOST } from \"utils/api\";\nimport { getStorageItem, storageAccessKey } from \"utils/local-storage\";\n\nclass NoteData {\n  private base;\n  private noteUrl;\n  constructor() {\n    this.base = axios.create({\n      baseURL: API_HOST,\n    });\n    this.noteUrl = API_URL.notes;\n  }\n\n  async getNoteContents() {\n    const { notes } = this.noteUrl;\n\n    const token = getStorageItem(storageAccessKey, \"\");\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n\n    const response = await this.base.get(notes, config);\n    const result = await response.data;\n    return result;\n  }\n\n  async editNote(contents: string) {\n    const { notes } = this.noteUrl;\n\n    const token = getStorageItem(storageAccessKey, \"\");\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n\n    const data = {\n      contents,\n    };\n\n    const response = await this.base.post(notes, data, config);\n    return response;\n  }\n\n  async deleteAllNote() {\n    const { notes } = this.noteUrl;\n\n    const token = getStorageItem(storageAccessKey, \"\");\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n\n    await this.base.delete(notes, config);\n  }\n}\n\nexport default NoteData;\n","import AuthStore from \"stores/auth-store\";\nimport { action, makeObservable, observable } from \"mobx\";\nimport { RootStore } from \"stores/root-store\";\nimport NoteData from \"utils/note-data\";\n\nclass NoteStore {\n  private rootStore: RootStore;\n\n  private noteData: NoteData;\n\n  note: string;\n\n  constructor(root: RootStore, private authStore: AuthStore) {\n    makeObservable(this, {\n      note: observable,\n\n      setNote: action,\n      refreshNoteContents: action,\n      editNoteContents: action,\n      deleteNoteContents: action,\n    });\n\n    this.rootStore = root;\n\n    this.noteData = new NoteData();\n\n    this.note = \"\";\n  }\n\n  setNote(content: string) {\n    this.note = content;\n  }\n\n  async refreshNoteContents() {\n    if (!this.authStore.onLogin) {\n      this.setNote(\"\");\n      return;\n    }\n    try {\n      const result = await this.noteData.getNoteContents();\n      this.setNote(result.contents);\n    } catch (error) {\n      alert(error.request.response);\n      this.setNote(\"\");\n    }\n  }\n\n  async editNoteContents(contents: string) {\n    this.authStore.checkAccessToken();\n\n    await this.noteData.editNote(contents);\n    await this.refreshNoteContents();\n  }\n\n  async deleteNoteContents() {\n    this.authStore.checkAccessToken();\n\n    await this.noteData.deleteAllNote();\n    await this.refreshNoteContents();\n  }\n}\n\nexport default NoteStore;\n","import axios from \"axios\";\nimport API_URL, { API_HOST } from \"utils/api\";\nimport { getStorageItem, storageAccessKey } from \"utils/local-storage\";\n\nclass TodoData {\n  private base;\n  private todoUrl;\n  constructor() {\n    this.base = axios.create({\n      baseURL: API_HOST,\n    });\n    this.todoUrl = API_URL.notes;\n  }\n\n  async getAllTodoList() {\n    const { todo } = this.todoUrl;\n\n    const token = getStorageItem(storageAccessKey, \"\");\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n\n    const response = await this.base.get(todo, config);\n    const result = await response.data;\n    return result;\n  }\n\n  async addTodo(contents: string) {\n    const { todo } = this.todoUrl;\n\n    const data = {\n      contents,\n    };\n\n    const token = getStorageItem(storageAccessKey, \"\");\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n\n    const response = await this.base.post(todo, data, config);\n    return response;\n  }\n\n  async completeTodo(id: number) {\n    const { completed } = this.todoUrl;\n    const url = `${completed}${id}`;\n\n    const token = getStorageItem(storageAccessKey, \"\");\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n\n    await this.base.put(url, \"\", config);\n  }\n\n  async updateTodo(id: number, contents: string) {\n    const { todo } = this.todoUrl;\n    const url = `${todo}/${id}`;\n\n    const data = {\n      contents,\n    };\n\n    const token = getStorageItem(storageAccessKey, \"\");\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n\n    await this.base.put(url, data, config);\n  }\n\n  async deleteTodo(id: number) {\n    const { todo } = this.todoUrl;\n    const url = `${todo}/${id}`;\n\n    const token = getStorageItem(storageAccessKey, \"\");\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n\n    await this.base.delete(url, config);\n  }\n}\n\nexport default TodoData;\n","import AuthStore from \"stores/auth-store\";\nimport { action, makeObservable, observable } from \"mobx\";\nimport { RootStore } from \"stores/root-store\";\nimport TodoData from \"utils/todo-data\";\nimport { Todo } from \"components/feature/main-page/memo/todo-list\";\n\nclass TodoStore {\n  private rootStore: RootStore;\n\n  private todoData: TodoData;\n\n  todoList: Todo[];\n\n  constructor(root: RootStore, private authStore: AuthStore) {\n    makeObservable(this, {\n      todoList: observable,\n\n      setTodoList: action,\n      refreshTodoList: action,\n      addTodo: action,\n      deleteTodo: action,\n      completeTodo: action,\n      editTodo: action,\n    });\n\n    this.rootStore = root;\n\n    this.todoData = new TodoData();\n\n    this.todoList = [];\n  }\n\n  setTodoList(todos: Todo[]) {\n    this.todoList = todos;\n  }\n\n  async refreshTodoList() {\n    if (!this.authStore.onLogin) {\n      this.setTodoList([]);\n      return;\n    }\n\n    try {\n      const result = await this.todoData.getAllTodoList();\n      this.setTodoList(result.todos);\n    } catch (error) {\n      alert(error.request.response);\n    }\n  }\n\n  async addTodo(contents: string) {\n    this.authStore.checkAccessToken();\n\n    await this.todoData.addTodo(contents);\n    await this.refreshTodoList();\n  }\n\n  async deleteTodo(id: number) {\n    this.authStore.checkAccessToken();\n\n    await this.todoData.deleteTodo(id);\n    await this.refreshTodoList();\n  }\n\n  async completeTodo(id: number) {\n    this.authStore.checkAccessToken();\n\n    await this.todoData.completeTodo(id);\n  }\n\n  async editTodo(id: number, contents: string) {\n    this.authStore.checkAccessToken();\n\n    await this.todoData.updateTodo(id, contents);\n  }\n}\n\nexport default TodoStore;\n","import BookmarkStore from \"stores/bookmark-store\";\nimport AuthStore from \"stores/auth-store\";\nimport FolderStore from \"stores/folder-store\";\nimport NoteStore from \"./note-store\";\nimport TodoStore from \"./todo-store\";\nexport class RootStore {\n  authStore: AuthStore;\n  folderStore: FolderStore;\n  bookmarkStore: BookmarkStore;\n  noteStore: NoteStore;\n  todoStore: TodoStore;\n\n  constructor() {\n    this.authStore = new AuthStore(this);\n    this.folderStore = new FolderStore(this, this.authStore);\n    this.bookmarkStore = new BookmarkStore(\n      this,\n      this.authStore,\n      this.folderStore\n    );\n    this.noteStore = new NoteStore(this, this.authStore);\n    this.todoStore = new TodoStore(this, this.authStore);\n  }\n}\n","import { createContext, ReactNode, useContext } from \"react\";\nimport { RootStore } from \"stores/root-store\";\n\nconst StoreContext = createContext(new RootStore());\n\ntype Props = {\n  children: ReactNode;\n};\n\nexport const StoreProvider = ({ children }: Props) => {\n  const rootStore = new RootStore();\n\n  return (\n    <StoreContext.Provider value={rootStore}>{children}</StoreContext.Provider>\n  );\n};\n\nexport const useStoreContext = () => useContext(StoreContext);\n","import React, { useEffect } from 'react';\nimport 'components/feature/header/auth/login.scss';\nimport { SelectedForm } from 'components/layout/header';\nimport styled from 'styled-components';\nimport { observer } from 'mobx-react';\nimport AuthStore from 'stores/auth-store';\n\nexport const LoadingSpinner = styled.div`\n  width: 1.2rem;\n  height: 1.2rem;\n  border-radius: 50%;\n  border: solid 0.2rem #ebebeb;\n  border-top: solid 0.2rem #8bb7ee;\n  animation: spin 1s linear infinite;\n`;\n\ntype Props = {\n  authStore: AuthStore;\n  setShowSelectedForm: React.Dispatch<React.SetStateAction<SelectedForm>>;\n};\n\nconst Login = observer(({ authStore, setShowSelectedForm }: Props) => {\n  const { loginForm } = authStore;\n  useEffect(() => {\n    return () => loginForm.resetInfo();\n  }, []);\n\n  const handleSubmitLogin = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    loginForm.setLoaded(false);\n    try {\n      await authStore.login();\n      if (authStore.onLogin) setShowSelectedForm('close');\n    } catch (error) {\n      alert(error.request.response);\n    }\n    loginForm.setLoaded(true);\n  };\n\n  return (\n    <form\n      className=\"login-form\"\n      onSubmit={(e: React.FormEvent<HTMLFormElement>) => handleSubmitLogin(e)}\n    >\n      <div className=\"login-header\">\n        <p className=\"login-title\">Login</p>\n      </div>\n      <section className=\"login-input\">\n        <input\n          type=\"email\"\n          className=\"login-email\"\n          placeholder=\"Email\"\n          value={loginForm.email}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            loginForm.setEmail(e.target.value);\n          }}\n          required\n        />\n        <input\n          type=\"password\"\n          className=\"login-password\"\n          placeholder=\"Password\"\n          value={loginForm.password}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            loginForm.setPassword(e.target.value);\n          }}\n          required\n        />\n      </section>\n      <section className=\"login-buttons\">\n        <button\n          className={`login-submit ${loginForm.loaded ? '' : 'loading'}`}\n          type=\"submit\"\n        >\n          {loginForm.loaded ? 'Login' : <LoadingSpinner />}\n        </button>\n        <button\n          className=\"login-otherOption\"\n          type=\"button\"\n          onClick={() => {\n            setShowSelectedForm('register');\n          }}\n        >\n          SignUp\n        </button>\n      </section>\n    </form>\n  );\n});\n\nexport default Login;\n","import React, { useMemo, useEffect } from 'react';\nimport 'components/feature/header/auth/register.scss';\nimport { SelectedForm } from 'components/layout/header';\nimport { LoadingSpinner } from 'components/feature/header/auth/login';\nimport AuthStore from 'stores/auth-store';\nimport { observer } from 'mobx-react';\n\ntype Props = {\n  authStore: AuthStore;\n  setShowSelectedForm: React.Dispatch<React.SetStateAction<SelectedForm>>;\n};\n\nexport type Steps = 'email' | 'verification' | 'password' | 'success';\n\nconst Register = observer(({ authStore, setShowSelectedForm }: Props) => {\n  const { registerForm } = authStore;\n\n  useEffect(() => {\n    return () => registerForm.resetInfo();\n  }, []);\n\n  const showHeader = (): React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLDivElement>,\n    HTMLDivElement\n  > => {\n    return (\n      <div className=\"register-header\">\n        <p className=\"register-title\">SignUp</p>\n      </div>\n    );\n  };\n\n  const checkPasswordLength = useMemo((): boolean => {\n    return registerForm.password.length >= 8;\n  }, [registerForm.password]);\n\n  const handleSubmitEmail = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    registerForm.setLoaded(false);\n    try {\n      await authStore.verificateEmail();\n    } catch (error) {\n      alert(error.request.response);\n      registerForm.setStep('email');\n    }\n    registerForm.setLoaded(true);\n  };\n\n  const showEmailInput = (): React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLElement>,\n    HTMLElement\n  > => {\n    return (\n      <form\n        className=\"register-form\"\n        onSubmit={(e: React.FormEvent<HTMLFormElement>) => handleSubmitEmail(e)}\n      >\n        {showHeader()}\n        <section className=\"register-input\">\n          <input\n            type=\"email\"\n            className=\"register-email\"\n            placeholder=\"Email\"\n            value={registerForm.email}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              registerForm.setEmail(e.target.value);\n            }}\n            required\n          />\n        </section>\n        <section className=\"register-buttons\">\n          <button\n            className={`register-submit ${\n              registerForm.loaded ? '' : 'loading'\n            }`}\n            type=\"submit\"\n          >\n            {registerForm.loaded ? '인증 요청하기' : <LoadingSpinner />}\n          </button>\n          <button\n            className=\"register-otherOption\"\n            type=\"button\"\n            onClick={() => {\n              registerForm.setStep('email');\n              setShowSelectedForm('login');\n            }}\n          >\n            Login\n          </button>\n        </section>\n      </form>\n    );\n  };\n\n  const handleSubmitCode = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    registerForm.setLoaded(false);\n    try {\n      await authStore.checkVerificationCode();\n    } catch (error) {\n      alert(error.request.response);\n    }\n    registerForm.setLoaded(true);\n  };\n\n  const showVerificationCodeInput = (): React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLElement>,\n    HTMLElement\n  > => {\n    return (\n      <form\n        className=\"register-form\"\n        onSubmit={(e: React.FormEvent<HTMLFormElement>) => handleSubmitCode(e)}\n      >\n        {showHeader()}\n        <section className=\"register-input\">\n          <input\n            className=\"register-verification\"\n            placeholder=\"Verification Code\"\n            value={registerForm.verificationCode}\n            required\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              registerForm.setVerificationCode(e.target.value);\n            }}\n          />\n        </section>\n        <section className=\"register-buttons\">\n          <button\n            className={`register-submit ${\n              registerForm.loaded ? '' : 'loading'\n            }`}\n            type=\"submit\"\n          >\n            {registerForm.loaded ? '인증하기' : <LoadingSpinner />}\n          </button>\n          <button\n            className=\"register-otherOption\"\n            type=\"button\"\n            onClick={() => {\n              registerForm.setStep('email');\n              setShowSelectedForm('login');\n            }}\n          >\n            Login\n          </button>\n        </section>\n      </form>\n    );\n  };\n\n  const handleSubmitPassword = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (!checkPasswordLength) return;\n\n    registerForm.setLoaded(false);\n    try {\n      await authStore.register();\n    } catch (error) {\n      alert(error.request.response);\n      registerForm.setStep('email');\n    }\n    registerForm.setLoaded(true);\n  };\n\n  const showPasswordInput = (): React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLElement>,\n    HTMLElement\n  > => {\n    return (\n      <form\n        className=\"register-form\"\n        onSubmit={(e: React.FormEvent<HTMLFormElement>) =>\n          handleSubmitPassword(e)\n        }\n      >\n        {showHeader()}\n        <section className=\"register-input\">\n          <input\n            type=\"password\"\n            className=\"register-password\"\n            placeholder=\"Password\"\n            value={registerForm.password}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              registerForm.setPassword(e.target.value);\n            }}\n            required\n          />\n          <p className={`register-alert ${checkPasswordLength ? '' : 'alert'}`}>\n            {checkPasswordLength\n              ? '사용 가능한 비밀번호 입니다'\n              : '비밀번호는 8글자 이상이어야 합니다.'}\n          </p>\n        </section>\n        <section className=\"register-buttons\">\n          <button\n            className={`register-submit ${\n              registerForm.loaded ? '' : 'loading'\n            }`}\n            type=\"submit\"\n          >\n            {registerForm.loaded ? '회원가입 하기' : <LoadingSpinner />}\n          </button>\n          <button\n            className=\"register-otherOption\"\n            type=\"button\"\n            onClick={() => {\n              registerForm.setStep('email');\n              setShowSelectedForm('login');\n            }}\n          >\n            Login\n          </button>\n        </section>\n      </form>\n    );\n  };\n\n  const showSuccessPage = (): React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLElement>,\n    HTMLElement\n  > => {\n    return (\n      <form className=\"register-form\">\n        {showHeader()}\n        <section className=\"register-notification\">\n          <h3>회원가입에 성공하였습니다!</h3>\n        </section>\n        <section className=\"register-buttons\">\n          <button\n            className=\"register-button\"\n            type=\"button\"\n            onClick={() => {\n              registerForm.setStep('email');\n              setShowSelectedForm('login');\n            }}\n          >\n            로그인 하러가기\n          </button>\n        </section>\n      </form>\n    );\n  };\n\n  const showFailPage = (): React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLElement>,\n    HTMLElement\n  > => {\n    return (\n      <form className=\"register-form\">\n        {showHeader()}\n        <section className=\"register-notification\">\n          <h2>회원가입에 실패하였습니다!</h2>\n        </section>\n        <section className=\"register-buttons\">\n          <button\n            className=\"register-button\"\n            type=\"button\"\n            onClick={() => {\n              registerForm.setStep('email');\n            }}\n          >\n            다시 회원가입 하러가기\n          </button>\n        </section>\n      </form>\n    );\n  };\n\n  return (\n    <>\n      {registerForm.step === 'email' && showEmailInput()}\n      {registerForm.step === 'verification' && showVerificationCodeInput()}\n      {registerForm.step === 'password' && showPasswordInput()}\n      {registerForm.step === 'success' && showSuccessPage()}\n    </>\n  );\n});\n\nexport default Register;\n","import React from 'react';\nimport 'components/feature/header/auth/auth.scss';\nimport styled from 'styled-components';\nimport Login from './login';\nimport Register from './register';\nimport { SelectedForm } from 'components/layout/header';\nimport AuthStore from 'stores/auth-store';\nimport { observer } from 'mobx-react';\n\nexport const DarkModalSection = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: 100vh;\n  z-index: 10;\n  background-color: rgba(0, 0, 0, 0.6);\n  cursor: auto;\n`;\n\ntype Props = {\n  authStore: AuthStore;\n  showSelectedForm: SelectedForm;\n  setShowSelectedForm: React.Dispatch<React.SetStateAction<SelectedForm>>;\n};\n\nconst Auth = observer(\n  ({ authStore, showSelectedForm, setShowSelectedForm }: Props) => {\n    return (\n      <DarkModalSection>\n        {showSelectedForm === 'login' && (\n          <Login\n            authStore={authStore}\n            setShowSelectedForm={setShowSelectedForm}\n          />\n        )}\n        {showSelectedForm === 'register' && (\n          <Register\n            authStore={authStore}\n            setShowSelectedForm={setShowSelectedForm}\n          />\n        )}\n      </DarkModalSection>\n    );\n  }\n);\n\nexport default Auth;\n","export const storageAccessKey = \"IFLAG_STORAGE_ACCESS_KEY\";\nexport const storageRefreshKey = \"IFLAG_STORAGE_REFRESH_KEY\";\nexport const storageAccessTokenExp = \"IFLAG_STORAGE_ACCESS_TOKEN_EXP\";\n\nexport const getStorageItem = (key: string, initialValue: string) => {\n  try {\n    const item = window.localStorage.getItem(key);\n    return item ? JSON.parse(item) : initialValue;\n  } catch (error) {\n    console.log(error);\n    return initialValue;\n  }\n};\n\nexport const setStorageItem = (key: string, value: string) => {\n  try {\n    window.localStorage.setItem(key, JSON.stringify(value));\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const removeStorageItem = (key: string) => {\n  try {\n    window.localStorage.removeItem(key);\n  } catch (error) {\n    console.log(error);\n  }\n};\n","export default __webpack_public_path__ + \"static/media/github.e21209f2.svg\";","export default __webpack_public_path__ + \"static/media/ddg.26196505.svg\";","export default __webpack_public_path__ + \"static/media/google.fc4f52a0.svg\";","export default __webpack_public_path__ + \"static/media/naver.1ed48714.png\";","export default __webpack_public_path__ + \"static/media/wa.b65b67b1.svg\";","export default __webpack_public_path__ + \"static/media/iflag-logo.820155c5.svg\";","import React, { useEffect, useState } from \"react\";\nimport { HiOutlineArrowCircleRight } from \"react-icons/hi\";\nimport \"components/layout/header.scss\";\nimport UserData from \"utils/user-data\";\nimport Auth from \"components/feature/header/auth/auth\";\nimport GithubIcon from \"assets/images/github.svg\";\nimport DDGIcon from \"assets/images/ddg.svg\";\nimport GoogleIcon from \"assets/images/google.svg\";\nimport NaverIcon from \"assets/images/naver.png\";\nimport WAIcon from \"assets/images/wa.svg\";\nimport Logo from \"assets/images/iflag-logo.svg\";\nimport AuthStore from \"stores/auth-store\";\nimport { observer } from \"mobx-react\";\n\ntype Props = {\n  userData: UserData;\n  authStore: AuthStore;\n};\n\nexport type SelectedForm = \"close\" | \"login\" | \"register\" | \"findPassword\";\n\ntype SearchEngineInfo = {\n  key: number;\n  name: string;\n  image: string;\n  abbreviation: string;\n  fullName?: string;\n};\n\nconst Header = observer(({ userData, authStore }: Props) => {\n  const [toggleButtonList, setToggleButtonList] = useState(false);\n  const [selectedSearchEngine, setSelectedSearchEngine] =\n    useState<SearchEngineInfo>({\n      key: 1,\n      name: \"Google\",\n      image: GoogleIcon,\n      abbreviation: \"G\",\n      fullName: \"google\",\n    });\n  const [searchEngines, setSearchEngines] = useState<SearchEngineInfo[]>([\n    {\n      key: 1,\n      name: \"Google\",\n      image: GoogleIcon,\n      abbreviation: \"G\",\n      fullName: \"google\",\n    },\n    {\n      key: 2,\n      name: \"Naver\",\n      image: NaverIcon,\n      abbreviation: \"N\",\n      fullName: \"naver\",\n    },\n    {\n      key: 3,\n      name: \"DDG\",\n      image: DDGIcon,\n      abbreviation: \"D\",\n      fullName: \"duckduckgo\",\n    },\n    {\n      key: 4,\n      name: \"Github\",\n      image: GithubIcon,\n      abbreviation: \"GH\",\n      fullName: \"github\",\n    },\n    {\n      key: 5,\n      name: \"WA\",\n      image: WAIcon,\n      abbreviation: \"WA\",\n      fullName: \"wolfram alpha\",\n    },\n  ]);\n  const [searchContent, setSearchContent] = useState(\"\");\n  const [showSelectedForm, setShowSelectedForm] =\n    useState<SelectedForm>(\"close\");\n\n  const saveSeletedSearchEngine = async () => {\n    if (!authStore.onLogin) return;\n    try {\n      await userData.selectSearchEngine(selectedSearchEngine.abbreviation);\n    } catch (error) {\n      alert(error.request.response);\n    }\n  };\n\n  const sortSearchEngineList = (newSelectedSearchEngine: SearchEngineInfo) => {\n    const newSearchEngines = searchEngines.filter(\n      (s) => s.key !== newSelectedSearchEngine.key\n    );\n    newSearchEngines.sort((a, b) => a.key - b.key);\n    setSearchEngines([newSelectedSearchEngine, ...newSearchEngines]);\n  };\n\n  const setInitialSearchEngine = async () => {\n    const result = await userData.getSelectedSearchEngine();\n    const newSelectedSearchEngine = searchEngines.find(\n      (s) => s.fullName === result.portal\n    );\n    if (newSelectedSearchEngine) {\n      setSelectedSearchEngine(newSelectedSearchEngine);\n      sortSearchEngineList(newSelectedSearchEngine);\n    }\n  };\n\n  useEffect(() => {\n    try {\n      setInitialSearchEngine();\n    } catch (error) {\n      if (error.request.status === 403) {\n        authStore.logout();\n      }\n    }\n  }, []);\n\n  useEffect(() => {\n    saveSeletedSearchEngine();\n  }, [selectedSearchEngine]);\n\n  useEffect(() => {\n    if (authStore.onLogin) {\n      setShowSelectedForm(\"close\");\n    } else {\n      setShowSelectedForm(\"login\");\n    }\n  }, [authStore.onLogin]);\n\n  const browseInNewTab = () => {\n    const searchQuery =\n      selectedSearchEngine.name === \"DDG\"\n        ? \"\"\n        : `!${selectedSearchEngine.name.toLowerCase()}+`;\n    window.open(\n      `https://duckduckgo.com/?q=${searchQuery}${searchContent}`,\n      \"_blank\"\n    );\n  };\n\n  return (\n    <header className=\"header\">\n      <div className=\"header-main\">\n        <img className=\"header-logo\" src={Logo} alt=\"logo\" />\n        <div className=\"header-search\">\n          <ul className=\"header-buttonList\">\n            {searchEngines.map(\n              (\n                searchEngine: SearchEngineInfo\n              ): React.DetailedHTMLProps<\n                React.LiHTMLAttributes<HTMLLIElement>,\n                HTMLLIElement\n              > => (\n                <li key={searchEngine.key} className=\"header-buttonItem\">\n                  <button\n                    className={`header-searchEngine ${\n                      toggleButtonList ||\n                      selectedSearchEngine.name === searchEngine.name\n                        ? \"visible\"\n                        : \"\"\n                    }`}\n                    onClick={() => {\n                      setToggleButtonList((prev) => !prev);\n                      setSelectedSearchEngine(searchEngine);\n                      sortSearchEngineList(searchEngine);\n                    }}\n                  >\n                    <img\n                      className=\"header-searchEngine-img\"\n                      src={searchEngine.image}\n                      alt=\"searchEngine-logo\"\n                    />\n                    {searchEngine.name}\n                  </button>\n                </li>\n              )\n            )}\n          </ul>\n          <form\n            className=\"header-searchForm\"\n            onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n              e.preventDefault();\n              browseInNewTab();\n              userData.saveSearchHistory(searchContent);\n            }}\n          >\n            <input\n              className=\"header-searchInput\"\n              value={searchContent}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                e.preventDefault();\n                setSearchContent(e.target.value);\n              }}\n            />\n            <button className=\"header-searchButton\" type=\"submit\">\n              <HiOutlineArrowCircleRight />\n            </button>\n          </form>\n        </div>\n        {authStore.onLogin ? (\n          <button\n            className=\"header-logoutButton\"\n            onClick={() => {\n              authStore.logout();\n            }}\n          >\n            Logout\n          </button>\n        ) : (\n          <button\n            className=\"header-loginButton\"\n            onClick={() => setShowSelectedForm(\"login\")}\n          >\n            Login\n          </button>\n        )}\n      </div>\n\n      {/* <div className=\"header-recentSearch\">\n        <p>Recently</p>\n        최근 검색어는 배열을 받아와서 map으로 보이게하고 클릭하면 검색되도록\n        <p>iflag</p>\n      </div> */}\n      {showSelectedForm !== \"close\" && (\n        <Auth\n          authStore={authStore}\n          showSelectedForm={showSelectedForm}\n          setShowSelectedForm={setShowSelectedForm}\n        />\n      )}\n    </header>\n  );\n});\n\nexport default Header;\n","import React from 'react';\nimport 'components/layout/footer.scss';\nconst Footer = () => {\n  return (\n    <div className=\"footer\">\n      <p className=\"footer-title\">IFLAG</p>\n    </div>\n  );\n};\n\nexport default Footer;\n","import axios from \"axios\";\nimport API_URL, { API_HOST } from \"utils/api\";\nimport { getStorageItem, storageAccessKey } from \"utils/local-storage\";\ninterface UserDataInterface {\n  selectSearchEngine(mode: string): Promise<void>;\n}\nclass UserData implements UserDataInterface {\n  private base;\n  private userUrl;\n  constructor() {\n    this.base = axios.create({\n      baseURL: API_HOST,\n    });\n    this.userUrl = API_URL.users;\n  }\n\n  async selectSearchEngine(searchEngine: string): Promise<void> {\n    const { portal } = this.userUrl;\n    const data = {\n      portal: searchEngine,\n    };\n\n    const token = getStorageItem(storageAccessKey, \"\");\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n    await this.base.post(portal, data, config);\n  }\n\n  async getSelectedSearchEngine() {\n    const { portal } = this.userUrl;\n\n    const token = getStorageItem(storageAccessKey, \"\");\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n    const response = await this.base.get(portal, config);\n    const result = await response.data;\n    return result;\n  }\n\n  async saveSearchHistory(searched: string) {\n    const { history } = this.userUrl;\n    const data = {\n      keyword: searched,\n    };\n\n    const token = getStorageItem(storageAccessKey, \"\");\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n\n    await this.base.post(history, data, config);\n  }\n}\n\nexport default UserData;\n","import React from 'react';\nimport Header from 'components/layout/header';\nimport Footer from 'components/layout/footer';\nimport UserData from 'utils/user-data';\nimport { useStoreContext } from 'contexts/store-context';\nimport { observer } from 'mobx-react';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nconst userData = new UserData();\n\nconst Layout = observer(({ children }: Props) => {\n  const { authStore } = useStoreContext();\n  return (\n    <>\n      <Header userData={userData} authStore={authStore} />\n      {children}\n      <Footer />\n    </>\n  );\n});\n\nexport default Layout;\n","import Layout from \"components/layout\";\nimport { observer } from \"mobx-react\";\nimport \"pages/main-page/main-page.scss\";\nimport { lazy, Suspense } from \"react\";\nimport AuthStore from \"stores/auth-store\";\n\ntype Props = {\n  authStore: AuthStore;\n};\n\nconst LazyTodoList = lazy(\n  () => import(\"components/feature/main-page/memo/todo-list\")\n);\nconst LazyBookmarkSection = lazy(\n  () => import(\"components/feature/main-page/bookmark/bookmark-section\")\n);\nconst LazyNote = lazy(() => import(\"components/feature/main-page/memo/note\"));\n\nconst MainPage = observer(({ authStore }: Props) => {\n  return (\n    <Layout>\n      <div className=\"mainpage\">\n        <Suspense fallback={null}>\n          <LazyTodoList authStore={authStore} />\n          <LazyBookmarkSection authStore={authStore} />\n          <LazyNote authStore={authStore} />\n        </Suspense>\n      </div>\n    </Layout>\n  );\n});\n\nexport default MainPage;\n","import MainPage from \"pages/main-page/main-page\";\nimport { useEffect } from \"react\";\nimport \"App.scss\";\nimport { useStoreContext } from \"contexts/store-context\";\nimport { observer } from \"mobx-react\";\n\nconst App = observer(() => {\n  const { authStore } = useStoreContext();\n\n  useEffect(() => {\n    authStore.checkLoginState();\n  }, []);\n\n  return (\n    <div className=\"app\">\n      <MainPage authStore={authStore} />\n    </div>\n  );\n});\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"App\";\nimport \"index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","const version = \"v1\";\n\nexport const API_HOST = \"https://api.iflag.co/\" + version;\n\nconst API_URL = {\n  users: {\n    verification: \"/users/verification\",\n    verificationCode: \"/users/verification/code\",\n    signin: \"/users/signin/\",\n    signup: \"/users/signup\",\n    portal: \"/users/portal\",\n    history: \"/users/history\",\n    refresh: \"/users/token/refresh/\",\n  },\n  bookmarks: {\n    bookmarks: \"/bookmarks/\",\n    categories: \"/bookmarks/categories/\",\n    search: \"/bookmarks/search\",\n  },\n  notes: {\n    notes: \"/notes/\",\n    todo: \"/notes/todolist\",\n    completed: \"/notes/todolist/completed/\",\n  },\n};\n\nexport default API_URL;\n"],"sourceRoot":""}