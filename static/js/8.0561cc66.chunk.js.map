{"version":3,"sources":["components/feature/main-page/memo/note.tsx"],"names":["Note","observer","authStore","noteStore","useStoreContext","useState","contents","setContents","editing","setEditing","useEffect","refreshNoteContents","note","onLogin","handleKeyPressEditButton","e","a","key","shiftKey","preventDefault","editNoteContents","error","alert","request","response","className","onClick","prev","deleteNoteContents","value","onChange","target","onKeyPress"],"mappings":"gOAYMA,EAAOC,aAAS,YAA2B,IAAxBC,EAAuB,EAAvBA,UACfC,EAAcC,cAAdD,UADsC,EAEdE,mBAAS,IAFK,mBAEvCC,EAFuC,KAE7BC,EAF6B,OAIhBF,oBAAS,GAJO,mBAIvCG,EAJuC,KAI9BC,EAJ8B,KAM9CC,qBAAU,WACRP,EAAUQ,sBAEVJ,EAAYJ,EAAUS,QACrB,CAACV,EAAUW,QAASL,IAEvB,IAAMM,EAAwB,uCAAG,WAC/BC,GAD+B,SAAAC,EAAA,sDAG/B,GAAc,UAAVD,EAAEE,MACCF,EAAEG,SAAU,CACfH,EAAEI,iBACF,IACEhB,EAAUiB,iBAAiBd,GAC3BG,GAAW,GACX,MAAOY,GACPC,MAAMD,EAAME,QAAQC,WAVK,2CAAH,sDAgB9B,OACE,sBAAKC,UAAU,OAAf,UACE,sBAAKA,UAAU,cAAf,UACE,mBAAGA,UAAU,aAAb,kBACA,sBAAKA,UAAU,eAAf,UACE,wBACEA,UAAU,YACVC,QAAS,WACPjB,GAAW,SAACkB,GAAD,OAAWA,MAH1B,SAME,cAAC,IAAD,MAEF,wBACEF,UAAU,aACVC,QAAS,WACPvB,EAAUyB,sBAHd,SAME,cAAC,IAAD,YAIN,qBAAKH,UAAU,YAAf,SACIjB,EAKA,qBAAKiB,UAAU,eAAf,SACE,0BACEI,MAAOvB,EACPwB,SAAU,SAACf,GACTR,EAAYQ,EAAEgB,OAAOF,QAEvBJ,UAAU,aACVO,WAAYlB,MAXhB,mBAAGW,UAAU,gBAAgBC,QAAS,kBAAMjB,GAAW,IAAvD,SACGN,EAAUS,eAmBRZ","file":"static/js/8.0561cc66.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"components/feature/main-page/memo/note.scss\";\nimport { AiOutlineClear } from \"react-icons/ai\";\nimport { BiEdit } from \"react-icons/bi\";\nimport AuthStore from \"stores/auth-store\";\nimport { observer } from \"mobx-react\";\nimport { useStoreContext } from \"contexts/store-context\";\n\ntype Props = {\n  authStore: AuthStore;\n};\n\nconst Note = observer(({ authStore }: Props) => {\n  const { noteStore } = useStoreContext();\n  const [contents, setContents] = useState(\"\");\n\n  const [editing, setEditing] = useState(false);\n\n  useEffect(() => {\n    noteStore.refreshNoteContents();\n\n    setContents(noteStore.note);\n  }, [authStore.onLogin, editing]);\n\n  const handleKeyPressEditButton = async (\n    e: React.KeyboardEvent<HTMLTextAreaElement>\n  ) => {\n    if (e.key === \"Enter\") {\n      if (!e.shiftKey) {\n        e.preventDefault();\n        try {\n          noteStore.editNoteContents(contents);\n          setEditing(false);\n        } catch (error) {\n          alert(error.request.response);\n        }\n      }\n    }\n  };\n\n  return (\n    <div className=\"note\">\n      <div className=\"note-header\">\n        <p className=\"note-title\">Memo</p>\n        <div className=\"note-buttons\">\n          <button\n            className=\"note-edit\"\n            onClick={() => {\n              setEditing((prev) => !prev);\n            }}\n          >\n            <BiEdit />\n          </button>\n          <button\n            className=\"note-clear\"\n            onClick={() => {\n              noteStore.deleteNoteContents();\n            }}\n          >\n            <AiOutlineClear />\n          </button>\n        </div>\n      </div>\n      <div className=\"note-main\">\n        {!editing ? (\n          <p className=\"note-contents\" onClick={() => setEditing(true)}>\n            {noteStore.note}\n          </p>\n        ) : (\n          <div className=\"note-setting\">\n            <textarea\n              value={contents}\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                setContents(e.target.value);\n              }}\n              className=\"note-input\"\n              onKeyPress={handleKeyPressEditButton}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n});\n\nexport default Note;\n"],"sourceRoot":""}