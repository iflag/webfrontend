{"version":3,"sources":["components/feature/main-page/memo/note.tsx"],"names":["Note","observer","authStore","noteStore","useStoreContext","useState","note","contents","setContents","editing","setEditing","getNoteContents","a","refreshNoteContents","useEffect","onLogin","handleKeyPressEditButton","e","key","shiftKey","preventDefault","editNoteContents","error","alert","request","response","className","onClick","prev","deleteNoteContents","value","onChange","target","onKeyPress"],"mappings":"gOAYMA,EAAOC,aAAS,YAA2B,IAAxBC,EAAuB,EAAvBA,UACfC,EAAcC,cAAdD,UADsC,EAEdE,mBAASF,EAAUG,MAFL,mBAEvCC,EAFuC,KAE7BC,EAF6B,OAIhBH,oBAAS,GAJO,mBAIvCI,EAJuC,KAI9BC,EAJ8B,KAMxCC,EAAe,uCAAG,sBAAAC,EAAA,sEAChBT,EAAUU,sBADM,OAEtBL,EAAYL,EAAUG,MAFA,2CAAH,qDAKrBQ,qBAAU,WACRH,MACC,CAACT,EAAUa,UAEd,IAAMC,EAAwB,uCAAG,WAC/BC,GAD+B,SAAAL,EAAA,sDAG/B,GAAc,UAAVK,EAAEC,MACCD,EAAEE,SAAU,CACfF,EAAEG,iBACF,IACEjB,EAAUkB,iBAAiBd,GAC3BG,GAAW,GACX,MAAOY,GACPC,MAAMD,EAAME,QAAQC,WAVK,2CAAH,sDAgB9B,OACE,sBAAKC,UAAU,OAAf,UACE,sBAAKA,UAAU,cAAf,UACE,mBAAGA,UAAU,aAAb,kBACA,sBAAKA,UAAU,eAAf,UACE,wBACEA,UAAU,YACVC,QAAS,WACPjB,GAAW,SAACkB,GAAD,OAAWA,MAH1B,SAME,cAAC,IAAD,MAEF,wBACEF,UAAU,aACVC,QAAS,WACPxB,EAAU0B,sBAHd,SAME,cAAC,IAAD,YAIN,qBAAKH,UAAU,YAAf,SACIjB,EAKA,qBAAKiB,UAAU,eAAf,SACE,0BACEI,MAAOvB,EACPwB,SAAU,SAACd,GACTT,EAAYS,EAAEe,OAAOF,QAEvBJ,UAAU,aACVO,WAAYjB,MAXhB,mBAAGU,UAAU,gBAAgBC,QAAS,kBAAMjB,GAAW,IAAvD,SACGH,YAmBEP","file":"static/js/8.4fe3cc87.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport 'components/feature/main-page/memo/note.scss';\r\nimport { AiOutlineClear } from 'react-icons/ai';\r\nimport { BiEdit } from 'react-icons/bi';\r\nimport AuthStore from 'stores/auth-store';\r\nimport { observer } from 'mobx-react';\r\nimport { useStoreContext } from 'contexts/store-context';\r\n\r\ntype Props = {\r\n  authStore: AuthStore;\r\n};\r\n\r\nconst Note = observer(({ authStore }: Props) => {\r\n  const { noteStore } = useStoreContext();\r\n  const [contents, setContents] = useState(noteStore.note);\r\n\r\n  const [editing, setEditing] = useState(false);\r\n\r\n  const getNoteContents = async () => {\r\n    await noteStore.refreshNoteContents();\r\n    setContents(noteStore.note);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getNoteContents();\r\n  }, [authStore.onLogin]);\r\n\r\n  const handleKeyPressEditButton = async (\r\n    e: React.KeyboardEvent<HTMLTextAreaElement>\r\n  ) => {\r\n    if (e.key === 'Enter') {\r\n      if (!e.shiftKey) {\r\n        e.preventDefault();\r\n        try {\r\n          noteStore.editNoteContents(contents);\r\n          setEditing(false);\r\n        } catch (error) {\r\n          alert(error.request.response);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"note\">\r\n      <div className=\"note-header\">\r\n        <p className=\"note-title\">Memo</p>\r\n        <div className=\"note-buttons\">\r\n          <button\r\n            className=\"note-edit\"\r\n            onClick={() => {\r\n              setEditing((prev) => !prev);\r\n            }}\r\n          >\r\n            <BiEdit />\r\n          </button>\r\n          <button\r\n            className=\"note-clear\"\r\n            onClick={() => {\r\n              noteStore.deleteNoteContents();\r\n            }}\r\n          >\r\n            <AiOutlineClear />\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div className=\"note-main\">\r\n        {!editing ? (\r\n          <p className=\"note-contents\" onClick={() => setEditing(true)}>\r\n            {contents}\r\n          </p>\r\n        ) : (\r\n          <div className=\"note-setting\">\r\n            <textarea\r\n              value={contents}\r\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n                setContents(e.target.value);\r\n              }}\r\n              className=\"note-input\"\r\n              onKeyPress={handleKeyPressEditButton}\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Note;\r\n"],"sourceRoot":""}