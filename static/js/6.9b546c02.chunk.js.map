{"version":3,"sources":["components/feature/main-page/bookmark/bookmark-item.tsx","components/feature/main-page/bookmark/favicon.tsx","components/feature/main-page/bookmark/folder-item.tsx","components/feature/main-page/bookmark/rootItem-list.tsx","components/feature/main-page/bookmark/bookmark-section.tsx"],"names":["cleanUrl","url","cleanedUrl","includes","slice","split","BookmarkItem","observer","bookmarkStore","content","editing","setEditing","useState","title","setTitle","faviconUrl","useMemo","favicon","setFavicon","handleSubmitBookmarkEditForm","e","preventDefault","editBookmarkInfo","id","description","error","alert","request","response","handleClickDeleteBookmarkButton","a","deleteBookmark","getAllRootBookmarks","className","onClick","window","open","onSubmit","value","onChange","target","Favicon","getFavicon","axios","get","icons","data","src","useEffect","width","height","alt","memo","LazyBookmarkListInFolder","lazy","FolderItem","folderStore","showSelectedFolder","setShowSelectedFolder","handleClickDeleteFolderButton","deleteFolder","handleSubmitFolderEditForm","editFolderName","refreshBookmarkListInFolder","onMouseEnter","fallback","contentId","RootItemList","showAddFolderForm","setShowAddFolderForm","prev","folderInfoList","map","folderInfo","rootBookmarks","addFolder","type","placeholder","required","BookmarkSection","authStore","useStoreContext","bookmarkForm","showAddBookmarkForm","setShowAddBookmarkForm","searchInput","setSearchInput","onLogin","setFolderInfoList","setFolderNameList","setRootBookmarks","getAllFolders","searchBookmarks","addBookmark","resetInfo","setUrl","setDescription","setCategoryTitle","folderNameList","name","idx","onSelect"],"mappings":"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","file":"static/js/6.9b546c02.chunk.js","sourcesContent":["import React, { useMemo, useState } from \"react\";\nimport \"components/feature/main-page/bookmark/bookmark-item.scss\";\nimport { Bookmark } from \"components/feature/main-page/bookmark/bookmark-section\";\nimport { AiOutlineClose } from \"react-icons/ai\";\nimport { DarkModalSection } from \"components/feature/header/auth/auth\";\nimport Favicon from \"./favicon\";\nimport BookmarkStore from \"stores/bookmark-store\";\nimport { observer } from \"mobx-react\";\n\ntype Props = {\n  bookmarkStore: BookmarkStore;\n  content: Bookmark;\n  editing: boolean;\n  setEditing: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nexport const cleanUrl = (url: string) => {\n  let cleanedUrl = url.includes(\"https\")\n    ? url.slice(8)\n    : url.includes(\"http\")\n    ? url.slice(7)\n    : \"\";\n  if (cleanedUrl) {\n    cleanedUrl = cleanedUrl.includes(\"/\")\n      ? cleanedUrl.split(\"/\")[0]\n      : cleanedUrl;\n  }\n  return cleanedUrl;\n};\n\nconst BookmarkItem = observer(\n  ({ bookmarkStore, content, editing, setEditing }: Props) => {\n    const [title, setTitle] = useState(content.title);\n\n    const faviconUrl = useMemo(() => cleanUrl(content.url), [content.url]);\n\n    const [favicon, setFavicon] = useState(\n      `http://www.google.com/s2/favicons?domain=${faviconUrl}`\n    );\n\n    const handleSubmitBookmarkEditForm = (\n      e: React.FormEvent<HTMLFormElement>\n    ) => {\n      e.preventDefault();\n      try {\n        bookmarkStore.editBookmarkInfo(content.id, {\n          title,\n          description: content.description,\n          url: content.url,\n        });\n        setEditing(false);\n      } catch (error) {\n        alert(error.request.response);\n      }\n    };\n\n    const handleClickDeleteBookmarkButton = async () => {\n      try {\n        await bookmarkStore.deleteBookmark(content.id);\n        bookmarkStore.getAllRootBookmarks();\n      } catch (error) {\n        alert(error.request.response);\n      }\n    };\n\n    const showBookmarkItem = () => {\n      return (\n        <div\n          className={`bookmarkItem-main ${editing ? \"editing\" : \"\"}`}\n          onClick={() => {\n            if (!editing) {\n              window.open(`${content.url}`, \"_blank\");\n            }\n          }}\n        >\n          {!editing ? (\n            <>\n              <div className=\"bookmarkItem-icon\">\n                {\n                  <Favicon\n                    url={content.url}\n                    favicon={favicon}\n                    setFavicon={setFavicon}\n                  />\n                }\n              </div>\n              <p className=\"bookmarkItem-title\">{title}</p>\n            </>\n          ) : (\n            <>\n              <div className=\"bookmarkItem-setting\">\n                <button\n                  className=\"bookmarkItem-delete\"\n                  onClick={handleClickDeleteBookmarkButton}\n                >\n                  <AiOutlineClose />\n                </button>\n              </div>\n              <form onSubmit={handleSubmitBookmarkEditForm}>\n                <input\n                  className=\"bookmarkItem-input\"\n                  value={title}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setTitle(e.target.value);\n                  }}\n                />\n              </form>\n            </>\n          )}\n        </div>\n      );\n    };\n\n    return <div className=\"bookmarkItem\">{showBookmarkItem()}</div>;\n  }\n);\n\nexport default BookmarkItem;\n","import axios from \"axios\";\nimport \"components/feature/main-page/bookmark/favicon.scss\";\nimport React, { memo, useEffect } from \"react\";\nimport { cleanUrl } from \"./bookmark-item\";\n\ntype Props = {\n  url: string;\n  favicon: string;\n  setFavicon: React.Dispatch<React.SetStateAction<string>>;\n};\n\nconst Favicon = ({ url, favicon, setFavicon }: Props) => {\n  const getFavicon = async () => {\n    const faviconUrl = cleanUrl(url);\n\n    const {\n      data: { icons },\n    } = await axios.get(`http://favicongrabber.com/api/grab/${faviconUrl}`);\n    if (icons[0].src !== \"\") {\n      setFavicon(icons[0].src);\n    }\n  };\n\n  useEffect(() => {\n    getFavicon();\n  }, []);\n\n  return (\n    <div>\n      <img\n        src={favicon}\n        width=\"25\"\n        height=\"25\"\n        alt=\"icon\"\n        className=\"favicon\"\n      />\n    </div>\n  );\n};\n\nexport default memo(Favicon);\n","import React, { lazy, Suspense, useState } from \"react\";\nimport \"components/feature/main-page/bookmark/folder-item.scss\";\nimport { FolderInfo } from \"components/feature/main-page/bookmark/bookmark-section\";\nimport { AiOutlineClose } from \"react-icons/ai\";\nimport { DarkModalSection } from \"components/feature/header/auth/auth\";\nimport BookmarkStore from \"stores/bookmark-store\";\nimport { observer } from \"mobx-react\";\nimport FolderStore from \"stores/folder-store\";\n\ntype Props = {\n  folderStore: FolderStore;\n  bookmarkStore: BookmarkStore;\n  content: FolderInfo;\n  editing: boolean;\n  setEditing: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nconst LazyBookmarkListInFolder = lazy(\n  () => import(\"components/feature/main-page/bookmark/bookmarkList-in-folder\")\n);\n\nconst FolderItem = observer(\n  ({ folderStore, bookmarkStore, content, editing, setEditing }: Props) => {\n    const [title, setTitle] = useState(content.title);\n\n    const [showSelectedFolder, setShowSelectedFolder] = useState(false);\n\n    const handleMouseEnterLazyLoad = () =>\n      import(\"components/feature/main-page/bookmark/bookmarkList-in-folder\");\n\n    const handleClickDeleteFolderButton = async () => {\n      try {\n        folderStore.deleteFolder(content.id);\n      } catch (error) {\n        alert(error.request.response);\n      }\n    };\n\n    const handleSubmitFolderEditForm = (\n      e: React.FormEvent<HTMLFormElement>\n    ) => {\n      e.preventDefault();\n      try {\n        folderStore.editFolderName(content.id, title);\n        setEditing(false);\n      } catch (error) {\n        alert(error.request.response);\n      }\n    };\n\n    const showFolderItem = () => {\n      return (\n        <div className={`folderItem-main ${editing ? \"editing\" : \"\"}`}>\n          {!editing ? (\n            <>\n              <div className=\"folderItem-icon\"></div>\n              <p className=\"folderItem-title\">{title}</p>\n            </>\n          ) : (\n            <>\n              <div className=\"folderItem-setting\">\n                <button\n                  className=\"folderItem-delete\"\n                  onClick={handleClickDeleteFolderButton}\n                >\n                  <AiOutlineClose />\n                </button>\n              </div>\n              <form\n                className=\"folderItem-form\"\n                onSubmit={handleSubmitFolderEditForm}\n              >\n                <input\n                  className=\"folderItem-input\"\n                  value={title}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setTitle(e.target.value);\n                  }}\n                />\n              </form>\n            </>\n          )}\n        </div>\n      );\n    };\n\n    return (\n      <>\n        <div\n          className=\"folderItem-container\"\n          onClick={() => {\n            if (!editing) {\n              setShowSelectedFolder(true);\n              bookmarkStore.refreshBookmarkListInFolder(content.id);\n            }\n          }}\n        >\n          <div className=\"folderItem\" onMouseEnter={handleMouseEnterLazyLoad}>\n            {showFolderItem()}\n            {showSelectedFolder && (\n              <DarkModalSection>\n                {\n                  <Suspense fallback={null}>\n                    <LazyBookmarkListInFolder\n                      title={title}\n                      bookmarkStore={bookmarkStore}\n                      contentId={content.id}\n                      setShowSelectedFolder={setShowSelectedFolder}\n                    />\n                  </Suspense>\n                }\n              </DarkModalSection>\n            )}\n          </div>\n        </div>\n      </>\n    );\n  }\n);\n\nexport default FolderItem;\n","import React, { useState } from \"react\";\nimport \"components/feature/main-page/bookmark/rootItem-list.scss\";\nimport FolderItem from \"components/feature/main-page/bookmark/folder-item\";\nimport { AiOutlineClose, AiOutlinePlus } from \"react-icons/ai\";\nimport { IoMdSettings } from \"react-icons/io\";\nimport {\n  Bookmark,\n  FolderInfo,\n} from \"components/feature/main-page/bookmark/bookmark-section\";\nimport { DarkModalSection } from \"components/feature/header/auth/auth\";\nimport BookmarkStore from \"stores/bookmark-store\";\nimport { observer } from \"mobx-react\";\nimport FolderStore from \"stores/folder-store\";\nimport BookmarkItem from \"./bookmark-item\";\n\ntype Props = {\n  folderStore: FolderStore;\n  bookmarkStore: BookmarkStore;\n};\n\nconst RootItemList = observer(({ folderStore, bookmarkStore }: Props) => {\n  const [showAddFolderForm, setShowAddFolderForm] = useState(false);\n  const [title, setTitle] = useState(\"\");\n\n  const [editing, setEditing] = useState(false);\n\n  const handleSubmitAddFolderForm = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    try {\n      folderStore.addFolder(title);\n      setShowAddFolderForm(false);\n    } catch (error) {\n      alert(error.request.response);\n    }\n    setTitle(\"\");\n  };\n\n  return (\n    <div className=\"rootList\">\n      <button\n        className=\"rootList-editButton\"\n        onClick={() => setEditing((prev) => !prev)}\n      >\n        <IoMdSettings />\n      </button>\n\n      <div className=\"rootList-content\">\n        <div className=\"rootList-container\">\n          <button\n            className=\"rootList-addButton\"\n            onClick={() => setShowAddFolderForm(true)}\n          >\n            <AiOutlinePlus />\n          </button>\n        </div>\n        <section className=\"rootList-folderSection\">\n          {folderStore.folderInfoList.map((folderInfo: FolderInfo) => {\n            return (\n              <FolderItem\n                key={folderInfo.id}\n                folderStore={folderStore}\n                bookmarkStore={bookmarkStore}\n                content={folderInfo}\n                editing={editing}\n                setEditing={setEditing}\n              />\n            );\n          })}\n        </section>\n\n        <section className=\"rootList-bookmarkSection\">\n          {bookmarkStore.rootBookmarks.map((content: Bookmark) => (\n            <BookmarkItem\n              key={content.id}\n              bookmarkStore={bookmarkStore}\n              content={content}\n              editing={editing}\n              setEditing={setEditing}\n            />\n          ))}\n        </section>\n      </div>\n      {showAddFolderForm && (\n        <DarkModalSection>\n          <form className=\"rootList-form\" onSubmit={handleSubmitAddFolderForm}>\n            <div className=\"rootList-form-header\">\n              <p className=\"rootList-form-title\">Add Folder</p>\n              <button\n                className=\"rootList-form-close\"\n                onClick={() => {\n                  setShowAddFolderForm(false);\n                  setTitle(\"\");\n                }}\n                type=\"button\"\n              >\n                <AiOutlineClose />\n              </button>\n            </div>\n            <section className=\"rootList-form-input\">\n              <input\n                className=\"rootList-form-foldertitle\"\n                placeholder=\"Title\"\n                value={title}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setTitle(e.target.value);\n                }}\n                required\n              />\n            </section>\n            <section className=\"rootList-form-buttons\">\n              <button className=\"rootList-form-submit\" type=\"submit\">\n                Add\n              </button>\n            </section>\n          </form>\n        </DarkModalSection>\n      )}\n    </div>\n  );\n});\n\nexport default RootItemList;\n","import React, { useEffect, useState } from \"react\";\nimport \"components/feature/main-page/bookmark/bookmark-section.scss\";\nimport {\n  AiOutlineSearch,\n  AiFillPlusCircle,\n  AiOutlineClose,\n} from \"react-icons/ai\";\nimport RootItemList from \"components/feature/main-page/bookmark/rootItem-list\";\nimport { DarkModalSection } from \"components/feature/header/auth/auth\";\nimport { useStoreContext } from \"contexts/store-context\";\nimport { observer } from \"mobx-react\";\nimport AuthStore from \"stores/auth-store\";\n\ntype Props = {\n  authStore: AuthStore;\n};\n\nexport type Bookmark = {\n  author: object;\n  category?: object;\n  description: string;\n  id: number;\n  title: string;\n  url: string;\n};\n\nexport type BookmarkInfo = Pick<Bookmark, \"title\" | \"description\" | \"url\">;\n\nexport type CommonInfo = {\n  title: string;\n  url: string;\n  description: string;\n  category_title?: string;\n};\n\nexport type FolderInfo = Pick<Bookmark, \"author\" | \"id\" | \"title\">;\n\nconst BookmarkSection = observer(({ authStore }: Props) => {\n  const { bookmarkStore } = useStoreContext();\n  const { folderStore } = useStoreContext();\n  const { bookmarkForm } = bookmarkStore;\n\n  const [showAddBookmarkForm, setShowAddBookmarkForm] = useState(false);\n\n  const [searchInput, setSearchInput] = useState(\"\");\n\n  useEffect(() => {\n    if (!authStore.onLogin) {\n      folderStore.setFolderInfoList([]);\n      folderStore.setFolderNameList([]);\n      bookmarkStore.setRootBookmarks([]);\n      return;\n    }\n    bookmarkStore.getAllRootBookmarks();\n    folderStore.getAllFolders();\n  }, [authStore.onLogin]);\n\n  const handleSubmitSearchInput = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    try {\n      bookmarkStore.searchBookmarks(searchInput);\n    } catch (error) {\n      alert(error.request.response);\n    }\n  };\n\n  const handleSubmitAddBookmarkForm = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    try {\n      bookmarkStore.addBookmark();\n      setShowAddBookmarkForm(false);\n    } catch (error) {\n      alert(error.request.response);\n    }\n    bookmarkForm.resetInfo();\n  };\n  return (\n    <div className=\"bookmark\">\n      <div className=\"bookmark-header\">\n        <p className=\"bookmark-header-title\">Bookmark</p>\n        <form\n          className=\"bookmark-searchForm\"\n          onSubmit={handleSubmitSearchInput}\n        >\n          <input\n            className=\"bookmark-searchInput\"\n            placeholder=\"Search\"\n            value={searchInput}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              setSearchInput(e.target.value);\n            }}\n          />\n          <button className=\"bookmark-searchButton\" type=\"submit\">\n            <AiOutlineSearch />\n          </button>\n        </form>\n        <button\n          className=\"bookmark-addButton\"\n          onClick={() => setShowAddBookmarkForm(true)}\n        >\n          <AiFillPlusCircle />\n        </button>\n      </div>\n      {showAddBookmarkForm && (\n        <DarkModalSection>\n          <form\n            className=\"bookmark-form\"\n            onSubmit={handleSubmitAddBookmarkForm}\n          >\n            <div className=\"bookmark-form-header\">\n              <p className=\"bookmark-form-title\">Add Bookmark</p>\n              <button\n                className=\"bookmark-form-close\"\n                onClick={() => {\n                  setShowAddBookmarkForm(false);\n                  bookmarkForm.resetInfo();\n                }}\n                type=\"button\"\n              >\n                <AiOutlineClose />\n              </button>\n            </div>\n            <section className=\"bookmark-form-input\">\n              <input\n                className=\"bookmark-form-bookmarkTitle\"\n                placeholder=\"Title\"\n                value={bookmarkForm.title}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  bookmarkForm.setTitle(e.target.value);\n                }}\n                required\n              />\n              <input\n                className=\"bookmark-form-url\"\n                placeholder=\"Url\"\n                value={bookmarkForm.url}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  bookmarkForm.setUrl(e.target.value);\n                }}\n                required\n              />\n              <input\n                className=\"bookmark-form-description\"\n                placeholder=\"Description\"\n                value={bookmarkForm.description}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  bookmarkForm.setDescription(e.target.value);\n                }}\n                required\n              />\n              <select\n                className=\"bookmark-form-categoryTitle\"\n                onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                  bookmarkForm.setCategoryTitle(e.target.value);\n                }}\n              >\n                {folderStore.folderNameList.map((name: string, idx: number) => (\n                  <option\n                    key={idx}\n                    onSelect={() => bookmarkForm.setCategoryTitle(name)}\n                  >\n                    {name}\n                  </option>\n                ))}\n              </select>\n            </section>\n            <section className=\"bookmark-form-buttons\">\n              <button className=\"bookmark-form-submit\" type=\"submit\">\n                Add\n              </button>\n            </section>\n          </form>\n        </DarkModalSection>\n      )}\n      <RootItemList folderStore={folderStore} bookmarkStore={bookmarkStore} />\n    </div>\n  );\n});\n\nexport default BookmarkSection;\n"],"sourceRoot":""}