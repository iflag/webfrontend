{"version":3,"sources":["components/shared/modal.tsx","components/feature/main-page/bookmark/bookmark-item.tsx","components/feature/main-page/bookmark/favicon.tsx","components/feature/main-page/bookmark/folder-item.tsx","components/feature/main-page/bookmark/rootItem-list.tsx","components/feature/main-page/bookmark/bookmark-section.tsx"],"names":["Modal","children","onCloseModal","onClick","cleanUrl","url","cleanedUrl","includes","slice","split","BookmarkItem","observer","bookmarkStore","content","editing","setEditing","useState","title","setTitle","faviconUrl","useMemo","favicon","setFavicon","handleSubmitBookmarkEditForm","e","preventDefault","editBookmarkInfo","id","description","error","alert","request","response","handleClickDeleteBookmarkButton","a","deleteBookmark","getAllRootBookmarks","className","window","open","onSubmit","value","onChange","target","Favicon","getFavicon","axios","get","icons","data","src","useEffect","width","height","alt","memo","LazyBookmarkListInFolder","lazy","FolderItem","folderStore","showSelectedFolder","setShowSelectedFolder","handleClickDeleteFolderButton","deleteFolder","handleSubmitFolderEditForm","editFolderName","refreshBookmarkListInFolder","onMouseEnter","fallback","contentId","RootItemList","showAddFolderForm","setShowAddFolderForm","stopPropagation","useCallback","prev","folderInfoList","map","folderInfo","rootBookmarks","addFolder","type","placeholder","required","BookmarkSection","authStore","useStoreContext","bookmarkForm","showAddBookmarkForm","setShowAddBookmarkForm","searchInput","setSearchInput","onLogin","setFolderInfoList","setFolderNameList","setRootBookmarks","getAllFolders","searchBookmarks","addBookmark","resetInfo","setUrl","setDescription","setCategoryTitle","folderNameList","name","idx","onSelect"],"mappings":"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","file":"static/js/6.c1e3cbb0.chunk.js","sourcesContent":["import { DarkModalSection } from 'components/feature/header/auth/auth';\r\nimport { ReactNode } from 'react';\r\n\r\ntype Props = {\r\n  children: ReactNode;\r\n  onCloseModal: () => void;\r\n};\r\n\r\nconst Modal = ({ children, onCloseModal }: Props) => {\r\n  return <DarkModalSection onClick={onCloseModal}>{children}</DarkModalSection>;\r\n};\r\n\r\nexport default Modal;\r\n","import React, { useMemo, useState } from 'react';\r\nimport 'components/feature/main-page/bookmark/bookmark-item.scss';\r\nimport { Bookmark } from 'components/feature/main-page/bookmark/bookmark-section';\r\nimport { AiOutlineClose } from 'react-icons/ai';\r\nimport Favicon from './favicon';\r\nimport BookmarkStore from 'stores/bookmark-store';\r\nimport { observer } from 'mobx-react';\r\n\r\ntype Props = {\r\n  bookmarkStore: BookmarkStore;\r\n  content: Bookmark;\r\n  editing: boolean;\r\n  setEditing: React.Dispatch<React.SetStateAction<boolean>>;\r\n};\r\n\r\nexport const cleanUrl = (url: string) => {\r\n  let cleanedUrl = url.includes('https')\r\n    ? url.slice(8)\r\n    : url.includes('http')\r\n    ? url.slice(7)\r\n    : '';\r\n  if (cleanedUrl) {\r\n    cleanedUrl = cleanedUrl.includes('/')\r\n      ? cleanedUrl.split('/')[0]\r\n      : cleanedUrl;\r\n  }\r\n  return cleanedUrl;\r\n};\r\n\r\nconst BookmarkItem = observer(\r\n  ({ bookmarkStore, content, editing, setEditing }: Props) => {\r\n    const [title, setTitle] = useState(content.title);\r\n\r\n    const faviconUrl = useMemo(() => cleanUrl(content.url), [content.url]);\r\n\r\n    const [favicon, setFavicon] = useState(\r\n      `http://www.google.com/s2/favicons?domain=${faviconUrl}`\r\n    );\r\n\r\n    const handleSubmitBookmarkEditForm = (\r\n      e: React.FormEvent<HTMLFormElement>\r\n    ) => {\r\n      e.preventDefault();\r\n      try {\r\n        bookmarkStore.editBookmarkInfo(content.id, {\r\n          title,\r\n          description: content.description,\r\n          url: content.url,\r\n        });\r\n        setEditing(false);\r\n      } catch (error) {\r\n        alert(error.request.response);\r\n      }\r\n    };\r\n\r\n    const handleClickDeleteBookmarkButton = async () => {\r\n      try {\r\n        await bookmarkStore.deleteBookmark(content.id);\r\n        bookmarkStore.getAllRootBookmarks();\r\n      } catch (error) {\r\n        alert(error.request.response);\r\n      }\r\n    };\r\n\r\n    const showBookmarkItem = () => {\r\n      return (\r\n        <div\r\n          className={`bookmarkItem-main ${editing ? 'editing' : ''}`}\r\n          onClick={() => {\r\n            if (!editing) {\r\n              window.open(`${content.url}`, '_blank');\r\n            }\r\n          }}\r\n        >\r\n          {!editing ? (\r\n            <>\r\n              <div className=\"bookmarkItem-icon\">\r\n                {\r\n                  <Favicon\r\n                    faviconUrl={faviconUrl}\r\n                    favicon={favicon}\r\n                    setFavicon={setFavicon}\r\n                  />\r\n                }\r\n              </div>\r\n              <p className=\"bookmarkItem-title\">{title}</p>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <div className=\"bookmarkItem-setting\">\r\n                <button\r\n                  className=\"bookmarkItem-delete\"\r\n                  onClick={handleClickDeleteBookmarkButton}\r\n                >\r\n                  <AiOutlineClose />\r\n                </button>\r\n              </div>\r\n              <form onSubmit={handleSubmitBookmarkEditForm}>\r\n                <input\r\n                  className=\"bookmarkItem-input\"\r\n                  value={title}\r\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                    setTitle(e.target.value);\r\n                  }}\r\n                />\r\n              </form>\r\n            </>\r\n          )}\r\n        </div>\r\n      );\r\n    };\r\n\r\n    return <div className=\"bookmarkItem\">{showBookmarkItem()}</div>;\r\n  }\r\n);\r\n\r\nexport default BookmarkItem;\r\n","import axios from 'axios';\r\nimport 'components/feature/main-page/bookmark/favicon.scss';\r\nimport React, { memo, useEffect } from 'react';\r\n\r\ntype Props = {\r\n  faviconUrl: string;\r\n  favicon: string;\r\n  setFavicon: React.Dispatch<React.SetStateAction<string>>;\r\n};\r\n\r\nconst Favicon = ({ faviconUrl, favicon, setFavicon }: Props) => {\r\n  const getFavicon = async () => {\r\n    try {\r\n      const {\r\n        data: { icons },\r\n      } = await axios.get(`http://favicongrabber.com/api/grab/${faviconUrl}`);\r\n      if (icons[0].src !== '') {\r\n        setFavicon(icons[0].src);\r\n      }\r\n    } catch (error) {\r\n      setFavicon(`http://www.google.com/s2/favicons?domain=${faviconUrl}`);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getFavicon();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <img\r\n        src={favicon}\r\n        width=\"25\"\r\n        height=\"25\"\r\n        alt=\"icon\"\r\n        className=\"favicon\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(Favicon);\r\n","import React, { lazy, Suspense, useState } from 'react';\r\nimport 'components/feature/main-page/bookmark/folder-item.scss';\r\nimport { FolderInfo } from 'components/feature/main-page/bookmark/bookmark-section';\r\nimport { AiOutlineClose } from 'react-icons/ai';\r\nimport BookmarkStore from 'stores/bookmark-store';\r\nimport { observer } from 'mobx-react';\r\nimport FolderStore from 'stores/folder-store';\r\n\r\ntype Props = {\r\n  folderStore: FolderStore;\r\n  bookmarkStore: BookmarkStore;\r\n  content: FolderInfo;\r\n  editing: boolean;\r\n  setEditing: React.Dispatch<React.SetStateAction<boolean>>;\r\n};\r\n\r\nconst LazyBookmarkListInFolder = lazy(\r\n  () => import('components/feature/main-page/bookmark/bookmarkList-in-folder')\r\n);\r\n\r\nconst FolderItem = observer(\r\n  ({ folderStore, bookmarkStore, content, editing, setEditing }: Props) => {\r\n    const [title, setTitle] = useState(content.title);\r\n\r\n    const [showSelectedFolder, setShowSelectedFolder] = useState(false);\r\n\r\n    const handleMouseEnterLazyLoad = () =>\r\n      import('components/feature/main-page/bookmark/bookmarkList-in-folder');\r\n\r\n    const handleClickDeleteFolderButton = async () => {\r\n      try {\r\n        folderStore.deleteFolder(content.id);\r\n      } catch (error) {\r\n        alert(error.request.response);\r\n      }\r\n    };\r\n\r\n    const handleSubmitFolderEditForm = (\r\n      e: React.FormEvent<HTMLFormElement>\r\n    ) => {\r\n      e.preventDefault();\r\n      try {\r\n        folderStore.editFolderName(content.id, title);\r\n        setEditing(false);\r\n      } catch (error) {\r\n        alert(error.request.response);\r\n      }\r\n    };\r\n\r\n    const showFolderItem = () => {\r\n      return (\r\n        <div className={`folderItem-main ${editing ? 'editing' : ''}`}>\r\n          {!editing ? (\r\n            <>\r\n              <div className=\"folderItem-icon\"></div>\r\n              <p className=\"folderItem-title\">{title}</p>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <div className=\"folderItem-setting\">\r\n                <button\r\n                  className=\"folderItem-delete\"\r\n                  onClick={handleClickDeleteFolderButton}\r\n                >\r\n                  <AiOutlineClose />\r\n                </button>\r\n              </div>\r\n              <form\r\n                className=\"folderItem-form\"\r\n                onSubmit={handleSubmitFolderEditForm}\r\n              >\r\n                <input\r\n                  className=\"folderItem-input\"\r\n                  value={title}\r\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                    setTitle(e.target.value);\r\n                  }}\r\n                />\r\n              </form>\r\n            </>\r\n          )}\r\n        </div>\r\n      );\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <div\r\n          className=\"folderItem-container\"\r\n          onClick={() => {\r\n            if (!editing) {\r\n              setShowSelectedFolder(true);\r\n              bookmarkStore.refreshBookmarkListInFolder(content.id);\r\n            }\r\n          }}\r\n        >\r\n          <div className=\"folderItem\" onMouseEnter={handleMouseEnterLazyLoad}>\r\n            {showFolderItem()}\r\n          </div>\r\n        </div>\r\n        {showSelectedFolder && (\r\n          <Suspense fallback={null}>\r\n            <LazyBookmarkListInFolder\r\n              title={title}\r\n              bookmarkStore={bookmarkStore}\r\n              contentId={content.id}\r\n              setShowSelectedFolder={setShowSelectedFolder}\r\n            />\r\n          </Suspense>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nexport default FolderItem;\r\n","import React, { useCallback, useState } from 'react';\r\nimport 'components/feature/main-page/bookmark/rootItem-list.scss';\r\nimport FolderItem from 'components/feature/main-page/bookmark/folder-item';\r\nimport { AiOutlineClose, AiOutlinePlus } from 'react-icons/ai';\r\nimport { IoMdSettings } from 'react-icons/io';\r\nimport {\r\n  Bookmark,\r\n  FolderInfo,\r\n} from 'components/feature/main-page/bookmark/bookmark-section';\r\nimport BookmarkStore from 'stores/bookmark-store';\r\nimport { observer } from 'mobx-react';\r\nimport FolderStore from 'stores/folder-store';\r\nimport BookmarkItem from './bookmark-item';\r\nimport Modal from 'components/shared/modal';\r\n\r\ntype Props = {\r\n  folderStore: FolderStore;\r\n  bookmarkStore: BookmarkStore;\r\n};\r\n\r\nconst RootItemList = observer(({ folderStore, bookmarkStore }: Props) => {\r\n  const [showAddFolderForm, setShowAddFolderForm] = useState(false);\r\n  const [title, setTitle] = useState('');\r\n\r\n  const [editing, setEditing] = useState(false);\r\n\r\n  const handleSubmitAddFolderForm = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    try {\r\n      folderStore.addFolder(title);\r\n      setShowAddFolderForm(false);\r\n    } catch (error) {\r\n      alert(error.request.response);\r\n    }\r\n    setTitle('');\r\n  };\r\n\r\n  const stopPropagation = useCallback((e) => {\r\n    e.stopPropagation();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"rootList\">\r\n      <button\r\n        className=\"rootList-editButton\"\r\n        onClick={() => setEditing((prev) => !prev)}\r\n      >\r\n        <IoMdSettings />\r\n      </button>\r\n\r\n      <div className=\"rootList-content\">\r\n        <div className=\"rootList-button-container\">\r\n          <div className=\"rootList-container\">\r\n            <button\r\n              className=\"rootList-addButton\"\r\n              onClick={() => setShowAddFolderForm(true)}\r\n            >\r\n              <AiOutlinePlus />\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"rootList-folderSection\">\r\n          {folderStore.folderInfoList.map((folderInfo: FolderInfo) => {\r\n            return (\r\n              <FolderItem\r\n                key={folderInfo.id}\r\n                folderStore={folderStore}\r\n                bookmarkStore={bookmarkStore}\r\n                content={folderInfo}\r\n                editing={editing}\r\n                setEditing={setEditing}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n\r\n        <div className=\"rootList-bookmarkSection\">\r\n          {bookmarkStore.rootBookmarks.map((content: Bookmark) => (\r\n            <BookmarkItem\r\n              key={content.id}\r\n              bookmarkStore={bookmarkStore}\r\n              content={content}\r\n              editing={editing}\r\n              setEditing={setEditing}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n      {showAddFolderForm && (\r\n        <Modal onCloseModal={() => setShowAddFolderForm(false)}>\r\n          <form\r\n            className=\"rootList-form\"\r\n            onClick={stopPropagation}\r\n            onSubmit={handleSubmitAddFolderForm}\r\n          >\r\n            <div className=\"rootList-form-header\">\r\n              <p className=\"rootList-form-title\">Add Folder</p>\r\n              <button\r\n                className=\"rootList-form-close\"\r\n                onClick={() => {\r\n                  setShowAddFolderForm(false);\r\n                  setTitle('');\r\n                }}\r\n                type=\"button\"\r\n              >\r\n                <AiOutlineClose />\r\n              </button>\r\n            </div>\r\n            <div className=\"rootList-form-input\">\r\n              <input\r\n                className=\"rootList-form-foldertitle\"\r\n                placeholder=\"Title\"\r\n                value={title}\r\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                  setTitle(e.target.value);\r\n                }}\r\n                required\r\n              />\r\n            </div>\r\n            <div className=\"rootList-form-buttons\">\r\n              <button className=\"rootList-form-submit\" type=\"submit\">\r\n                Add\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </Modal>\r\n      )}\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default RootItemList;\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport 'components/feature/main-page/bookmark/bookmark-section.scss';\r\nimport {\r\n  AiOutlineSearch,\r\n  AiFillPlusCircle,\r\n  AiOutlineClose,\r\n} from 'react-icons/ai';\r\nimport RootItemList from 'components/feature/main-page/bookmark/rootItem-list';\r\nimport { DarkModalSection } from 'components/feature/header/auth/auth';\r\nimport { useStoreContext } from 'contexts/store-context';\r\nimport { observer } from 'mobx-react';\r\nimport AuthStore from 'stores/auth-store';\r\nimport Modal from 'components/shared/modal';\r\n\r\ntype Props = {\r\n  authStore: AuthStore;\r\n};\r\n\r\nexport type Bookmark = {\r\n  author: object;\r\n  category?: object;\r\n  description: string;\r\n  id: number;\r\n  title: string;\r\n  url: string;\r\n};\r\n\r\nexport type BookmarkInfo = Pick<Bookmark, 'title' | 'description' | 'url'>;\r\n\r\nexport type CommonInfo = {\r\n  title: string;\r\n  url: string;\r\n  description: string;\r\n  category_title?: string;\r\n};\r\n\r\nexport type FolderInfo = Pick<Bookmark, 'author' | 'id' | 'title'>;\r\n\r\nconst BookmarkSection = observer(({ authStore }: Props) => {\r\n  const { bookmarkStore } = useStoreContext();\r\n  const { folderStore } = useStoreContext();\r\n  const { bookmarkForm } = bookmarkStore;\r\n\r\n  const [showAddBookmarkForm, setShowAddBookmarkForm] = useState(false);\r\n\r\n  const [searchInput, setSearchInput] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (!authStore.onLogin) {\r\n      folderStore.setFolderInfoList([]);\r\n      folderStore.setFolderNameList([]);\r\n      bookmarkStore.setRootBookmarks([]);\r\n      return;\r\n    }\r\n    bookmarkStore.getAllRootBookmarks();\r\n    folderStore.getAllFolders();\r\n  }, [authStore.onLogin]);\r\n\r\n  const handleSubmitSearchInput = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    try {\r\n      bookmarkStore.searchBookmarks(searchInput);\r\n    } catch (error) {\r\n      alert(error.request.response);\r\n    }\r\n  };\r\n\r\n  const handleSubmitAddBookmarkForm = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    try {\r\n      bookmarkStore.addBookmark();\r\n      setShowAddBookmarkForm(false);\r\n    } catch (error) {\r\n      alert(error.request.response);\r\n    }\r\n    bookmarkForm.resetInfo();\r\n  };\r\n\r\n  const stopPropagation = useCallback((e) => {\r\n    e.stopPropagation();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"bookmark\">\r\n      <div className=\"bookmark-header\">\r\n        <p className=\"bookmark-header-title\">Bookmark</p>\r\n        <form\r\n          className=\"bookmark-searchForm\"\r\n          onSubmit={handleSubmitSearchInput}\r\n        >\r\n          <input\r\n            className=\"bookmark-searchInput\"\r\n            placeholder=\"Search\"\r\n            value={searchInput}\r\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n              setSearchInput(e.target.value);\r\n            }}\r\n          />\r\n          <button className=\"bookmark-searchButton\" type=\"submit\">\r\n            <AiOutlineSearch />\r\n          </button>\r\n        </form>\r\n        <button\r\n          className=\"bookmark-addButton\"\r\n          onClick={() => setShowAddBookmarkForm(true)}\r\n        >\r\n          <AiFillPlusCircle />\r\n        </button>\r\n      </div>\r\n      {showAddBookmarkForm && (\r\n        <Modal onCloseModal={() => setShowAddBookmarkForm(false)}>\r\n          <form\r\n            className=\"bookmark-form\"\r\n            onClick={stopPropagation}\r\n            onSubmit={handleSubmitAddBookmarkForm}\r\n          >\r\n            <div className=\"bookmark-form-header\">\r\n              <p className=\"bookmark-form-title\">Add Bookmark</p>\r\n              <button\r\n                className=\"bookmark-form-close\"\r\n                onClick={() => {\r\n                  setShowAddBookmarkForm(false);\r\n                  bookmarkForm.resetInfo();\r\n                }}\r\n                type=\"button\"\r\n              >\r\n                <AiOutlineClose />\r\n              </button>\r\n            </div>\r\n            <section className=\"bookmark-form-input\">\r\n              <input\r\n                className=\"bookmark-form-bookmarkTitle\"\r\n                placeholder=\"Title\"\r\n                value={bookmarkForm.title}\r\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                  bookmarkForm.setTitle(e.target.value);\r\n                }}\r\n                required\r\n              />\r\n              <input\r\n                className=\"bookmark-form-url\"\r\n                placeholder=\"Url\"\r\n                value={bookmarkForm.url}\r\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                  bookmarkForm.setUrl(e.target.value);\r\n                }}\r\n                required\r\n              />\r\n              <input\r\n                className=\"bookmark-form-description\"\r\n                placeholder=\"Description\"\r\n                value={bookmarkForm.description}\r\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                  bookmarkForm.setDescription(e.target.value);\r\n                }}\r\n                required\r\n              />\r\n              <select\r\n                className=\"bookmark-form-categoryTitle\"\r\n                onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\r\n                  bookmarkForm.setCategoryTitle(e.target.value);\r\n                }}\r\n              >\r\n                {folderStore.folderNameList.map((name: string, idx: number) => (\r\n                  <option\r\n                    key={idx}\r\n                    onSelect={() => bookmarkForm.setCategoryTitle(name)}\r\n                  >\r\n                    {name}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </section>\r\n            <section className=\"bookmark-form-buttons\">\r\n              <button className=\"bookmark-form-submit\" type=\"submit\">\r\n                Add\r\n              </button>\r\n            </section>\r\n          </form>\r\n        </Modal>\r\n      )}\r\n      <RootItemList folderStore={folderStore} bookmarkStore={bookmarkStore} />\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default BookmarkSection;\r\n"],"sourceRoot":""}