{"version":3,"sources":["components/feature/main-page/memo/todo-item.tsx","components/feature/main-page/memo/todo-list.tsx"],"names":["TodoItem","observer","todo","todoStore","editing","setEditing","useState","checked","setChecked","contents","setContents","useEffect","completed","className","onSubmit","e","preventDefault","editTodo","id","type","onClick","deleteTodo","value","onChange","target","onContextMenu","completeTodo","memo","TodoList","authStore","useStoreContext","showAddForm","setShowAddForm","refreshTodoList","onLogin","handleSubmitTodo","a","addTodo","error","alert","request","response","prev","placeholder","todoList","map"],"mappings":"2OAaMA,EAAWC,aAAS,YAAsD,IAAnDC,EAAkD,EAAlDA,KAAMC,EAA4C,EAA5CA,UAAWC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,WAAwB,EAC/CC,oBAA8B,GADiB,mBACtEC,EADsE,KAC7DC,EAD6D,OAG7CF,mBAAS,IAHoC,mBAGtEG,EAHsE,KAG5DC,EAH4D,KAK7EC,qBAAU,WACRH,EAAWN,EAAKU,WAChBF,EAAYR,EAAKO,YAChB,IAiBH,OACE,oBAAII,UAAU,WAAd,SACIT,EAqBA,uBAAMS,UAAU,oBAAoBC,SA7Bb,SAACC,GAC5BA,EAAEC,iBACFb,EAAUc,SAASf,EAAKgB,GAAIT,GAC5BJ,GAAW,IA0BP,UACE,wBACEQ,UAAU,wBACVM,KAAK,SACLC,QA1CsB,WAC9BjB,EAAUkB,WAAWnB,EAAKgB,KAsCpB,SAKE,cAAC,IAAD,MAEF,uBACEL,UAAU,0BACVS,MAAOb,EACPc,SAAU,SAACR,GACTL,EAAYK,EAAES,OAAOF,UAGzB,wBAAQT,UAAU,2BAA2BM,KAAK,SAAlD,qBAnCF,qCACE,mBACEN,UAAS,4BAAuBN,GAAW,WAC3CkB,cAAe,SACbV,GAEAA,EAAEC,iBACFX,GAAW,IANf,SASGI,IAEH,uBACEU,KAAK,WACLN,UAAU,oBACVN,QAASA,EACTgB,SA9BkB,SAACR,GAC3BP,EAAWO,EAAES,OAAOjB,SACpBJ,EAAUuB,aAAaxB,EAAKgB,eAwDjBS,iBAAK3B,G,gBClEd4B,EAAW3B,aAAS,YAA2B,IAAD,EAAvB4B,EAAuB,EAAvBA,UACnB1B,EAAc2B,cAAd3B,UAD0C,EAElBG,mBAAS,IAFS,mBAE3CG,EAF2C,KAEjCC,EAFiC,OAGZJ,oBAAS,GAHG,mBAG3CyB,EAH2C,KAG9BC,EAH8B,OAIpB1B,oBAAS,GAJW,mBAI3CF,EAJ2C,KAIlCC,EAJkC,KAMlDM,qBAAU,WACRR,EAAU8B,oBACT,CAACJ,EAAUK,UAEd,IAAMC,EAAgB,uCAAG,WAAOpB,GAAP,SAAAqB,EAAA,yDACvBrB,EAAEC,iBACe,KAAbP,EAFmB,iDAIvB,IACEN,EAAUkC,QAAQ5B,GAClBC,EAAY,IACZ,MAAO4B,GACPC,MAAMD,EAAME,QAAQC,UARC,2CAAH,sDAYtB,OACE,sBAAK5B,UAAU,WAAf,UACE,sBAAKA,UAAU,kBAAf,UACE,mBAAGA,UAAU,iBAAb,kBACA,sBAAKA,UAAU,sBAAf,UACE,wBACEA,UAAU,uBACVO,QAAS,kBAAMY,GAAe,SAACU,GAAD,OAAWA,MAF3C,SAIGX,EAAc,cAAC,IAAD,IAAwB,cAAC,IAAD,MAEzC,wBACElB,UAAU,sBACVO,QAAS,kBAAMf,GAAW,SAACqC,GAAD,OAAWA,MAFvC,SAIE,cAAC,IAAD,YAILX,GACC,uBACElB,UAAU,mBACVC,SAAU,SAACC,GAAD,OACRoB,EAAiBpB,IAHrB,UAME,uBACEF,UAAU,sBACVS,MAAOb,EACPc,SAAU,SAACR,GACTL,EAAYK,EAAES,OAAOF,QAEvBqB,YAAY,2EAEd,wBAAQxB,KAAK,SAASN,UAAU,qBAAhC,oBAKJ,oBAAIA,UAAU,gBAAd,mBACGV,EAAUyC,gBADb,aACG,EAAoBC,KACnB,SACE3C,GADF,OAME,cAAC,EAAD,CAEEA,KAAMA,EACNC,UAAWA,EACXC,QAASA,EACTC,WAAYA,GAJPH,EAAKgB,eAaTU","file":"static/js/7.54b2f7d3.chunk.js","sourcesContent":["import React, { memo, useEffect, useState } from \"react\";\r\nimport \"components/feature/main-page/memo/todo-item.scss\";\r\nimport { AiOutlineClose } from \"react-icons/ai\";\r\nimport { Todo } from \"components/feature/main-page/memo/todo-list\";\r\nimport { observer } from \"mobx-react\";\r\nimport TodoStore from \"stores/todo-store\";\r\ntype Props = {\r\n  todo: Todo;\r\n  todoStore: TodoStore;\r\n  editing: boolean;\r\n  setEditing: React.Dispatch<React.SetStateAction<boolean>>;\r\n};\r\n\r\nconst TodoItem = observer(({ todo, todoStore, editing, setEditing }: Props) => {\r\n  const [checked, setChecked] = useState<boolean | undefined>(false);\r\n\r\n  const [contents, setContents] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setChecked(todo.completed);\r\n    setContents(todo.contents);\r\n  }, []);\r\n\r\n  const handleClickDeleteButton = () => {\r\n    todoStore.deleteTodo(todo.id);\r\n  };\r\n\r\n  const handleChangeChecked = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setChecked(e.target.checked);\r\n    todoStore.completeTodo(todo.id);\r\n  };\r\n\r\n  const handleSubmitEditTodo = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    todoStore.editTodo(todo.id, contents);\r\n    setEditing(false);\r\n  };\r\n\r\n  return (\r\n    <li className=\"todoItem\">\r\n      {!editing ? (\r\n        <>\r\n          <p\r\n            className={`todoItem-contents ${checked && \"checked\"}`}\r\n            onContextMenu={(\r\n              e: React.MouseEvent<HTMLParagraphElement, MouseEvent>\r\n            ) => {\r\n              e.preventDefault();\r\n              setEditing(true);\r\n            }}\r\n          >\r\n            {contents}\r\n          </p>\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"todoItem-checkbox\"\r\n            checked={checked}\r\n            onChange={handleChangeChecked}\r\n          />\r\n        </>\r\n      ) : (\r\n        <form className=\"todoItem-editForm\" onSubmit={handleSubmitEditTodo}>\r\n          <button\r\n            className=\"todoItem-deleteButton\"\r\n            type=\"button\"\r\n            onClick={handleClickDeleteButton}\r\n          >\r\n            <AiOutlineClose />\r\n          </button>\r\n          <input\r\n            className=\"todoItem-editForm-input\"\r\n            value={contents}\r\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n              setContents(e.target.value);\r\n            }}\r\n          />\r\n          <button className=\"todoItem-editForm-button\" type=\"submit\">\r\n            edit\r\n          </button>\r\n        </form>\r\n      )}\r\n    </li>\r\n  );\r\n});\r\n\r\nexport default memo(TodoItem);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"components/feature/main-page/memo/todo-list.scss\";\r\nimport TodoItem from \"./todo-item\";\r\nimport AuthStore from \"stores/auth-store\";\r\nimport { observer } from \"mobx-react\";\r\nimport { AiFillMinusCircle, AiFillPlusCircle } from \"react-icons/ai\";\r\nimport { IoMdSettings } from \"react-icons/io\";\r\nimport { useStoreContext } from \"contexts/store-context\";\r\n\r\ntype Props = {\r\n  authStore: AuthStore;\r\n};\r\n\r\nexport type Todo = {\r\n  completed: boolean;\r\n  contents: string;\r\n  id: number;\r\n};\r\n\r\nconst TodoList = observer(({ authStore }: Props) => {\r\n  const { todoStore } = useStoreContext();\r\n  const [contents, setContents] = useState(\"\");\r\n  const [showAddForm, setShowAddForm] = useState(false);\r\n  const [editing, setEditing] = useState(false);\r\n\r\n  useEffect(() => {\r\n    todoStore.refreshTodoList();\r\n  }, [authStore.onLogin]);\r\n\r\n  const handleSubmitTodo = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (contents === \"\") return;\r\n\r\n    try {\r\n      todoStore.addTodo(contents);\r\n      setContents(\"\");\r\n    } catch (error) {\r\n      alert(error.request.response);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"todoList\">\r\n      <div className=\"todoList-header\">\r\n        <p className=\"todoList-title\">Todo</p>\r\n        <div className=\"todoList-buttonList\">\r\n          <button\r\n            className=\"todoList-showAddForm\"\r\n            onClick={() => setShowAddForm((prev) => !prev)}\r\n          >\r\n            {showAddForm ? <AiFillMinusCircle /> : <AiFillPlusCircle />}\r\n          </button>\r\n          <button\r\n            className=\"todoList-editButton\"\r\n            onClick={() => setEditing((prev) => !prev)}\r\n          >\r\n            <IoMdSettings />\r\n          </button>\r\n        </div>\r\n      </div>\r\n      {showAddForm && (\r\n        <form\r\n          className=\"todoList-addTodo\"\r\n          onSubmit={(e: React.FormEvent<HTMLFormElement>) =>\r\n            handleSubmitTodo(e)\r\n          }\r\n        >\r\n          <input\r\n            className=\"todoList-addContent\"\r\n            value={contents}\r\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n              setContents(e.target.value);\r\n            }}\r\n            placeholder=\"새로운 할 일을 추가하세요!\"\r\n          />\r\n          <button type=\"submit\" className=\"todoList-addButton\">\r\n            add\r\n          </button>\r\n        </form>\r\n      )}\r\n      <ul className=\"todoList-main\">\r\n        {todoStore.todoList?.map(\r\n          (\r\n            todo: Todo\r\n          ): React.DetailedHTMLProps<\r\n            React.HTMLAttributes<HTMLParagraphElement>,\r\n            HTMLParagraphElement\r\n          > => (\r\n            <TodoItem\r\n              key={todo.id}\r\n              todo={todo}\r\n              todoStore={todoStore}\r\n              editing={editing}\r\n              setEditing={setEditing}\r\n            />\r\n          )\r\n        )}\r\n      </ul>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default TodoList;\r\n"],"sourceRoot":""}