{"version":3,"sources":["components/feature/main-page/bookmark/bookmarkItem-in-folder.tsx","components/feature/main-page/bookmark/bookmarkList-in-folder.tsx"],"names":["BookmarkItemInFolder","observer","bookmarkStore","bookmark","contentId","editing","setEditing","useState","title","setTitle","faviconUrl","useMemo","cleanUrl","url","favicon","setFavicon","handleClickDeleteBookmarkButton","a","deleteBookmark","id","refreshBookmarkListInFolder","alert","request","response","className","onClick","window","open","onSubmit","e","preventDefault","editBookmarkInfo","description","error","value","onChange","target","memo","BookmarkListInFolder","setShowSelectedFolder","useEffect","setBookmarksInFolder","stopPropagation","useCallback","onCloseModal","prev","bookmarksInFolder","map"],"mappings":"6PAmBMA,EAAuBC,aAC3B,YAAyE,IAAtEC,EAAqE,EAArEA,cAAeC,EAAsD,EAAtDA,SAAUC,EAA4C,EAA5CA,UAAWC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,WAAwB,EAC5CC,mBAASJ,EAASK,OAD0B,mBAC/DA,EAD+D,KACxDC,EADwD,KAGhEC,EAAaC,mBAAQ,kBAAMC,YAAST,EAASU,OAAM,CAACV,EAASU,MAHG,EAKxCN,mBAAS,4CAAD,OACQG,IANwB,mBAK/DI,EAL+D,KAKtDC,EALsD,KAyBhEC,EAA+B,uCAAG,sBAAAC,EAAA,+EAE9Bf,EAAcgB,eAAef,EAASgB,IAFR,OAGpCjB,EAAckB,4BAA4BhB,GAHN,+CAKpCiB,MAAM,KAAMC,QAAQC,UALgB,wDAAH,qDASrC,OACE,qBACEC,UAAS,gCAA2BnB,EAAU,UAAY,IAC1DoB,QAAS,WACFpB,GACHqB,OAAOC,KAAP,UAAexB,EAASU,KAAO,WAJrC,SAQIR,EAcA,qCACE,qBAAKmB,UAAU,uBAAf,SACE,wBACEA,UAAU,sBACVC,QAAST,EAFX,SAIE,cAAC,IAAD,QAGJ,sBAAMY,SAzDuB,SACnCC,GAEAA,EAAEC,iBACF,IACE5B,EAAc6B,iBAAiB5B,EAASgB,GAAI,CAC1CX,QACAwB,YAAa7B,EAAS6B,YACtBnB,IAAKV,EAASU,MAEhBP,GAAW,GACX,MAAO2B,GACPZ,MAAMY,EAAMX,QAAQC,YA6ChB,SACE,uBACEC,UAAU,qBACVU,MAAO1B,EACP2B,SAAU,SAACN,GACTpB,EAASoB,EAAEO,OAAOF,eA3B1B,qCACE,qBAAKV,UAAU,oBAAf,SAEI,cAAC,IAAD,CACEd,WAAYA,EACZI,QAASA,EACTC,WAAYA,MAIlB,mBAAGS,UAAU,8BAAb,SAA4ChB,YA4BzC6B,iBAAKrC,G,gBCrFdsC,EAAuBrC,aAC3B,YAAwE,IAAD,EAApEO,EAAoE,EAApEA,MAAON,EAA6D,EAA7DA,cAAeE,EAA8C,EAA9CA,UAAWmC,EAAmC,EAAnCA,sBAAmC,EACvChC,oBAAS,GAD8B,mBAC9DF,EAD8D,KACrDC,EADqD,KAGrEkC,qBAAU,WACR,OAAO,WACLtC,EAAcuC,qBAAqB,OAEpC,IAEH,IAAMC,EAAkBC,uBAAY,SAACd,GACnCA,EAAEa,oBACD,IAEH,OACE,cAAC,IAAD,CAAOE,aAAc,kBAAML,GAAsB,IAAjD,SACE,sBAAKf,UAAU,eAAeC,QAASiB,EAAvC,UACE,sBAAKlB,UAAU,sBAAf,UACE,mBAAGA,UAAU,2BAAb,SAAyChB,IACzC,wBACEgB,UAAU,qBACVC,QAAS,kBAAMc,GAAsB,IAFvC,SAIE,cAAC,IAAD,MACQ,OAEZ,sBAAKf,UAAU,yBAAf,UACE,wBACEA,UAAU,0BACVC,QAAS,kBAAMnB,GAAW,SAACuC,GAAD,OAAWA,MAFvC,SAIE,cAAC,IAAD,MALJ,UAQG3C,EAAc4C,yBARjB,aAQG,EAAiCC,KAAI,SAAC5C,GAAD,OACpC,cAAC,EAAD,CAEED,cAAeA,EACfC,SAAUA,EACVC,UAAWA,EACXC,QAASA,EACTC,WAAYA,GALPH,EAASgB,kBAefmB","file":"static/js/1.6a901750.chunk.js","sourcesContent":["import React, { memo, useMemo, useState } from 'react';\nimport 'components/feature/main-page/bookmark/bookmarkItem-in-folder.scss';\nimport { Bookmark } from 'components/feature/main-page/bookmark/bookmark-section';\nimport { AiOutlineClose } from 'react-icons/ai';\nimport { DarkModalSection } from 'components/feature/header/auth/auth';\nimport { IoMdSettings } from 'react-icons/io';\nimport Favicon from './favicon';\nimport BookmarkStore from 'stores/bookmark-store';\nimport { observer } from 'mobx-react';\nimport { cleanUrl } from 'components/feature/main-page/bookmark/bookmark-item';\n\ntype Props = {\n  bookmarkStore: BookmarkStore;\n  bookmark: Bookmark;\n  contentId: number;\n  editing: boolean;\n  setEditing: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nconst BookmarkItemInFolder = observer(\n  ({ bookmarkStore, bookmark, contentId, editing, setEditing }: Props) => {\n    const [title, setTitle] = useState(bookmark.title);\n\n    const faviconUrl = useMemo(() => cleanUrl(bookmark.url), [bookmark.url]);\n\n    const [favicon, setFavicon] = useState(\n      `http://www.google.com/s2/favicons?domain=${faviconUrl}`\n    );\n\n    const handleSubmitBookmarkEditForm = (\n      e: React.FormEvent<HTMLFormElement>\n    ) => {\n      e.preventDefault();\n      try {\n        bookmarkStore.editBookmarkInfo(bookmark.id, {\n          title,\n          description: bookmark.description,\n          url: bookmark.url,\n        });\n        setEditing(false);\n      } catch (error) {\n        alert(error.request.response);\n      }\n    };\n\n    const handleClickDeleteBookmarkButton = async () => {\n      try {\n        await bookmarkStore.deleteBookmark(bookmark.id);\n        bookmarkStore.refreshBookmarkListInFolder(contentId);\n      } catch (error) {\n        alert(error.request.response);\n      }\n    };\n\n    return (\n      <div\n        className={`insideFolder-bookmark ${editing ? 'editing' : ''}`}\n        onClick={() => {\n          if (!editing) {\n            window.open(`${bookmark.url}`, '_blank');\n          }\n        }}\n      >\n        {!editing ? (\n          <>\n            <div className=\"insideFolder-icon\">\n              {\n                <Favicon\n                  faviconUrl={faviconUrl}\n                  favicon={favicon}\n                  setFavicon={setFavicon}\n                />\n              }\n            </div>\n            <p className=\"insideFolder-bookmark-title\">{title}</p>\n          </>\n        ) : (\n          <>\n            <div className=\"insideFolder-setting\">\n              <button\n                className=\"insideFolder-delete\"\n                onClick={handleClickDeleteBookmarkButton}\n              >\n                <AiOutlineClose />\n              </button>\n            </div>\n            <form onSubmit={handleSubmitBookmarkEditForm}>\n              <input\n                className=\"insideFolder-input\"\n                value={title}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setTitle(e.target.value);\n                }}\n              />\n            </form>\n          </>\n        )}\n      </div>\n    );\n  }\n);\n\nexport default memo(BookmarkItemInFolder);\n","import React, { useCallback, useEffect, useState } from 'react';\nimport 'components/feature/main-page/bookmark/bookmarkList-in-folder.scss';\nimport { Bookmark } from 'components/feature/main-page/bookmark/bookmark-section';\nimport { AiOutlineClose } from 'react-icons/ai';\nimport BookmarkItemInFolder from 'components/feature/main-page/bookmark/bookmarkItem-in-folder';\nimport BookmarkStore from 'stores/bookmark-store';\nimport { observer } from 'mobx-react';\nimport { IoMdSettings } from 'react-icons/io';\nimport Modal from 'components/shared/modal';\n\ntype Props = {\n  title: string;\n  bookmarkStore: BookmarkStore;\n  contentId: number;\n  setShowSelectedFolder: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nconst BookmarkListInFolder = observer(\n  ({ title, bookmarkStore, contentId, setShowSelectedFolder }: Props) => {\n    const [editing, setEditing] = useState(false);\n\n    useEffect(() => {\n      return () => {\n        bookmarkStore.setBookmarksInFolder([]);\n      };\n    }, []);\n\n    const stopPropagation = useCallback((e) => {\n      e.stopPropagation();\n    }, []);\n\n    return (\n      <Modal onCloseModal={() => setShowSelectedFolder(false)}>\n        <div className=\"insideFolder\" onClick={stopPropagation}>\n          <div className=\"insideFolder-header\">\n            <p className=\"insideFolder-folderTitle\">{title}</p>\n            <button\n              className=\"insideFolder-close\"\n              onClick={() => setShowSelectedFolder(false)}\n            >\n              <AiOutlineClose />\n            </button>{' '}\n          </div>\n          <div className=\"insideFolder-bookmarks\">\n            <button\n              className=\"insideFolder-editButton\"\n              onClick={() => setEditing((prev) => !prev)}\n            >\n              <IoMdSettings />\n            </button>\n\n            {bookmarkStore.bookmarksInFolder?.map((bookmark: Bookmark) => (\n              <BookmarkItemInFolder\n                key={bookmark.id}\n                bookmarkStore={bookmarkStore}\n                bookmark={bookmark}\n                contentId={contentId}\n                editing={editing}\n                setEditing={setEditing}\n              />\n            ))}\n          </div>\n        </div>\n      </Modal>\n    );\n  }\n);\n\nexport default BookmarkListInFolder;\n"],"sourceRoot":""}