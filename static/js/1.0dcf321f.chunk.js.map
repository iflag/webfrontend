{"version":3,"sources":["components/feature/main-page/bookmark/bookmarkItem-in-folder.tsx","components/feature/main-page/bookmark/bookmarkList-in-folder.tsx"],"names":["BookmarkItemInFolder","observer","bookmarkStore","bookmark","contentId","editing","setEditing","useState","title","setTitle","faviconUrl","useMemo","cleanUrl","url","favicon","setFavicon","handleClickDeleteBookmarkButton","a","deleteBookmark","id","refreshBookmarkListInFolder","alert","request","response","className","onClick","window","open","onSubmit","e","preventDefault","editBookmarkInfo","description","error","value","onChange","target","memo","BookmarkListInFolder","setShowSelectedFolder","useEffect","setBookmarksInFolder","stopPropagation","useCallback","onCloseModal","prev","bookmarksInFolder","map"],"mappings":"6PAmBMA,EAAuBC,aAC3B,YAAyE,IAAtEC,EAAqE,EAArEA,cAAeC,EAAsD,EAAtDA,SAAUC,EAA4C,EAA5CA,UAAWC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,WAAwB,EAC5CC,mBAASJ,EAASK,OAD0B,mBAC/DA,EAD+D,KACxDC,EADwD,KAGhEC,EAAaC,mBAAQ,kBAAMC,YAAST,EAASU,OAAM,CAACV,EAASU,MAHG,EAKxCN,mBAAS,4CAAD,OACQG,IANwB,mBAK/DI,EAL+D,KAKtDC,EALsD,KAyBhEC,EAA+B,uCAAG,sBAAAC,EAAA,+EAE9Bf,EAAcgB,eAAef,EAASgB,IAFR,OAGpCjB,EAAckB,4BAA4BhB,GAHN,+CAKpCiB,MAAM,KAAMC,QAAQC,UALgB,wDAAH,qDASrC,OACE,qBACEC,UAAS,gCAA2BnB,EAAU,UAAY,IAC1DoB,QAAS,WACFpB,GACHqB,OAAOC,KAAP,UAAexB,EAASU,KAAO,WAJrC,SAQIR,EAcA,qCACE,qBAAKmB,UAAU,uBAAf,SACE,wBACEA,UAAU,sBACVC,QAAST,EAFX,SAIE,cAAC,IAAD,QAGJ,sBAAMY,SAzDuB,SACnCC,GAEAA,EAAEC,iBACF,IACE5B,EAAc6B,iBAAiB5B,EAASgB,GAAI,CAC1CX,QACAwB,YAAa7B,EAAS6B,YACtBnB,IAAKV,EAASU,MAEhBP,GAAW,GACX,MAAO2B,GACPZ,MAAMY,EAAMX,QAAQC,YA6ChB,SACE,uBACEC,UAAU,qBACVU,MAAO1B,EACP2B,SAAU,SAACN,GACTpB,EAASoB,EAAEO,OAAOF,eA3B1B,qCACE,qBAAKV,UAAU,oBAAf,SAEI,cAAC,IAAD,CACEd,WAAYA,EACZI,QAASA,EACTC,WAAYA,MAIlB,mBAAGS,UAAU,8BAAb,SAA4ChB,YA4BzC6B,iBAAKrC,G,gBCrFdsC,EAAuBrC,aAC3B,YAAwE,IAAD,EAApEO,EAAoE,EAApEA,MAAON,EAA6D,EAA7DA,cAAeE,EAA8C,EAA9CA,UAAWmC,EAAmC,EAAnCA,sBAAmC,EACvChC,oBAAS,GAD8B,mBAC9DF,EAD8D,KACrDC,EADqD,KAGrEkC,qBAAU,WACR,OAAO,WACLtC,EAAcuC,qBAAqB,OAEpC,IAEH,IAAMC,EAAkBC,uBAAY,SAACd,GACnCA,EAAEa,oBACD,IAEH,OACE,cAAC,IAAD,CAAOE,aAAc,kBAAML,GAAsB,IAAjD,SACE,sBAAKf,UAAU,eAAeC,QAASiB,EAAvC,UACE,sBAAKlB,UAAU,sBAAf,UACE,mBAAGA,UAAU,2BAAb,SAAyChB,IACzC,wBACEgB,UAAU,qBACVC,QAAS,kBAAMc,GAAsB,IAFvC,SAIE,cAAC,IAAD,MACQ,OAEZ,sBAAKf,UAAU,yBAAf,UACE,wBACEA,UAAU,0BACVC,QAAS,kBAAMnB,GAAW,SAACuC,GAAD,OAAWA,MAFvC,SAIE,cAAC,IAAD,MALJ,UAQG3C,EAAc4C,yBARjB,aAQG,EAAiCC,KAAI,SAAC5C,GAAD,OACpC,cAAC,EAAD,CAEED,cAAeA,EACfC,SAAUA,EACVC,UAAWA,EACXC,QAASA,EACTC,WAAYA,GALPH,EAASgB,kBAefmB","file":"static/js/1.0dcf321f.chunk.js","sourcesContent":["import React, { memo, useMemo, useState } from 'react';\r\nimport 'components/feature/main-page/bookmark/bookmarkItem-in-folder.scss';\r\nimport { Bookmark } from 'components/feature/main-page/bookmark/bookmark-section';\r\nimport { AiOutlineClose } from 'react-icons/ai';\r\nimport { DarkModalSection } from 'components/feature/header/auth/auth';\r\nimport { IoMdSettings } from 'react-icons/io';\r\nimport Favicon from './favicon';\r\nimport BookmarkStore from 'stores/bookmark-store';\r\nimport { observer } from 'mobx-react';\r\nimport { cleanUrl } from 'components/feature/main-page/bookmark/bookmark-item';\r\n\r\ntype Props = {\r\n  bookmarkStore: BookmarkStore;\r\n  bookmark: Bookmark;\r\n  contentId: number;\r\n  editing: boolean;\r\n  setEditing: React.Dispatch<React.SetStateAction<boolean>>;\r\n};\r\n\r\nconst BookmarkItemInFolder = observer(\r\n  ({ bookmarkStore, bookmark, contentId, editing, setEditing }: Props) => {\r\n    const [title, setTitle] = useState(bookmark.title);\r\n\r\n    const faviconUrl = useMemo(() => cleanUrl(bookmark.url), [bookmark.url]);\r\n\r\n    const [favicon, setFavicon] = useState(\r\n      `http://www.google.com/s2/favicons?domain=${faviconUrl}`\r\n    );\r\n\r\n    const handleSubmitBookmarkEditForm = (\r\n      e: React.FormEvent<HTMLFormElement>\r\n    ) => {\r\n      e.preventDefault();\r\n      try {\r\n        bookmarkStore.editBookmarkInfo(bookmark.id, {\r\n          title,\r\n          description: bookmark.description,\r\n          url: bookmark.url,\r\n        });\r\n        setEditing(false);\r\n      } catch (error) {\r\n        alert(error.request.response);\r\n      }\r\n    };\r\n\r\n    const handleClickDeleteBookmarkButton = async () => {\r\n      try {\r\n        await bookmarkStore.deleteBookmark(bookmark.id);\r\n        bookmarkStore.refreshBookmarkListInFolder(contentId);\r\n      } catch (error) {\r\n        alert(error.request.response);\r\n      }\r\n    };\r\n\r\n    return (\r\n      <div\r\n        className={`insideFolder-bookmark ${editing ? 'editing' : ''}`}\r\n        onClick={() => {\r\n          if (!editing) {\r\n            window.open(`${bookmark.url}`, '_blank');\r\n          }\r\n        }}\r\n      >\r\n        {!editing ? (\r\n          <>\r\n            <div className=\"insideFolder-icon\">\r\n              {\r\n                <Favicon\r\n                  faviconUrl={faviconUrl}\r\n                  favicon={favicon}\r\n                  setFavicon={setFavicon}\r\n                />\r\n              }\r\n            </div>\r\n            <p className=\"insideFolder-bookmark-title\">{title}</p>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <div className=\"insideFolder-setting\">\r\n              <button\r\n                className=\"insideFolder-delete\"\r\n                onClick={handleClickDeleteBookmarkButton}\r\n              >\r\n                <AiOutlineClose />\r\n              </button>\r\n            </div>\r\n            <form onSubmit={handleSubmitBookmarkEditForm}>\r\n              <input\r\n                className=\"insideFolder-input\"\r\n                value={title}\r\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                  setTitle(e.target.value);\r\n                }}\r\n              />\r\n            </form>\r\n          </>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default memo(BookmarkItemInFolder);\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport 'components/feature/main-page/bookmark/bookmarkList-in-folder.scss';\r\nimport { Bookmark } from 'components/feature/main-page/bookmark/bookmark-section';\r\nimport { AiOutlineClose } from 'react-icons/ai';\r\nimport BookmarkItemInFolder from 'components/feature/main-page/bookmark/bookmarkItem-in-folder';\r\nimport BookmarkStore from 'stores/bookmark-store';\r\nimport { observer } from 'mobx-react';\r\nimport { IoMdSettings } from 'react-icons/io';\r\nimport Modal from 'components/shared/modal';\r\n\r\ntype Props = {\r\n  title: string;\r\n  bookmarkStore: BookmarkStore;\r\n  contentId: number;\r\n  setShowSelectedFolder: React.Dispatch<React.SetStateAction<boolean>>;\r\n};\r\n\r\nconst BookmarkListInFolder = observer(\r\n  ({ title, bookmarkStore, contentId, setShowSelectedFolder }: Props) => {\r\n    const [editing, setEditing] = useState(false);\r\n\r\n    useEffect(() => {\r\n      return () => {\r\n        bookmarkStore.setBookmarksInFolder([]);\r\n      };\r\n    }, []);\r\n\r\n    const stopPropagation = useCallback((e) => {\r\n      e.stopPropagation();\r\n    }, []);\r\n\r\n    return (\r\n      <Modal onCloseModal={() => setShowSelectedFolder(false)}>\r\n        <div className=\"insideFolder\" onClick={stopPropagation}>\r\n          <div className=\"insideFolder-header\">\r\n            <p className=\"insideFolder-folderTitle\">{title}</p>\r\n            <button\r\n              className=\"insideFolder-close\"\r\n              onClick={() => setShowSelectedFolder(false)}\r\n            >\r\n              <AiOutlineClose />\r\n            </button>{' '}\r\n          </div>\r\n          <div className=\"insideFolder-bookmarks\">\r\n            <button\r\n              className=\"insideFolder-editButton\"\r\n              onClick={() => setEditing((prev) => !prev)}\r\n            >\r\n              <IoMdSettings />\r\n            </button>\r\n\r\n            {bookmarkStore.bookmarksInFolder?.map((bookmark: Bookmark) => (\r\n              <BookmarkItemInFolder\r\n                key={bookmark.id}\r\n                bookmarkStore={bookmarkStore}\r\n                bookmark={bookmark}\r\n                contentId={contentId}\r\n                editing={editing}\r\n                setEditing={setEditing}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    );\r\n  }\r\n);\r\n\r\nexport default BookmarkListInFolder;\r\n"],"sourceRoot":""}